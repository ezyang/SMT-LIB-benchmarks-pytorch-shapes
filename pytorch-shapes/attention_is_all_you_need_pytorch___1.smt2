(set-option :produce-models true)
(define-fun ceil ((x Real)) Int (ite (= (to_int x) x) (to_int x) (+ (to_int x) 1)))
(define-fun min2 ((x Int) (y Int)) Int (ite (< x y) x y))
(define-fun max2 ((x Int) (y Int)) Int (ite (> x y) x y))
(define-fun sqrt ((x Real)) Real (^ x 0.5))

(declare-const src_seq_size0 Int)
(set-info :example-src_seq_size0 4)
(declare-const src_seq_size1 Int)
(set-info :example-src_seq_size1 24)
(declare-const src_seq_stride0 Int)
(set-info :example-src_seq_stride0 1)
(declare-const src_seq_stride1 Int)
(set-info :example-src_seq_stride1 4)
(declare-const src_seq_storage_offset Int)
(set-info :example-src_seq_storage_offset 0)
(define-fun ge () Bool (>= src_seq_size0 0))
(assert ge)
(define-fun ge_1 () Bool (>= src_seq_size1 0))
(assert ge_1)
(define-fun eq () Bool (= src_seq_size0 0))
(define-fun not_ () Bool (not eq))
(assert not_)
(define-fun sub () Int (- src_seq_size0 1))
(define-fun mul () Int (* src_seq_stride0 sub))
(define-fun add () Int (+ 1 mul))
(define-fun eq_1 () Bool (= src_seq_size1 0))
(define-fun not__1 () Bool (not eq_1))
(assert not__1)
(define-fun sub_1 () Int (- src_seq_size1 1))
(define-fun mul_1 () Int (* src_seq_stride1 sub_1))
(define-fun add_1 () Int (+ add mul_1))
(define-fun mul_2 () Int (* 8 add_1))
(define-fun mul_3 () Int (* src_seq_size0 src_seq_size1))
(define-fun eq_2 () Bool (= mul_3 0))
(define-fun not__2 () Bool (not eq_2))
(assert not__2)
(define-fun eq_3 () Bool (= src_seq_size1 1))
(define-fun not__3 () Bool (not eq_3))
(assert not__3)
(define-fun eq_4 () Bool (= src_seq_stride1 1))
(define-fun not__4 () Bool (not eq_4))
(assert not__4)
(define-fun lt () Bool (< src_seq_size1 2))
(define-fun not__5 () Bool (not lt))
(assert not__5)
(define-fun lt_1 () Bool (< src_seq_size0 2))
(define-fun not__6 () Bool (not lt_1))
(assert not__6)
(define-fun lt_2 () Bool (< src_seq_stride1 src_seq_stride0))
(define-fun not__7 () Bool (not lt_2))
(assert not__7)
(define-fun eq_5 () Bool (= src_seq_stride0 1))
(assert eq_5)
(define-fun eq_6 () Bool (= src_seq_stride1 src_seq_size0))
(assert eq_6)
(define-fun ge_2 () Bool (>= src_seq_storage_offset 0))
(assert ge_2)
(define-fun add_2 () Int (+ src_seq_storage_offset add_1))
(define-fun mul_4 () Int (* 8 add_2))
(declare-const src_mask__base_size0 Int)
(set-info :example-src_mask__base_size0 4)
(declare-const src_mask__base_size1 Int)
(set-info :example-src_mask__base_size1 24)
(declare-const src_mask__base_stride0 Int)
(set-info :example-src_mask__base_stride0 1)
(declare-const src_mask__base_stride1 Int)
(set-info :example-src_mask__base_stride1 4)
(declare-const src_mask__base_storage_offset Int)
(set-info :example-src_mask__base_storage_offset 0)
(define-fun ge_3 () Bool (>= src_mask__base_size0 0))
(assert ge_3)
(define-fun ge_4 () Bool (>= src_mask__base_size1 0))
(assert ge_4)
(define-fun eq_7 () Bool (= src_mask__base_size0 0))
(define-fun not__8 () Bool (not eq_7))
(assert not__8)
(define-fun sub_2 () Int (- src_mask__base_size0 1))
(define-fun mul_5 () Int (* src_mask__base_stride0 sub_2))
(define-fun add_3 () Int (+ 1 mul_5))
(define-fun eq_8 () Bool (= src_mask__base_size1 0))
(define-fun not__9 () Bool (not eq_8))
(assert not__9)
(define-fun sub_3 () Int (- src_mask__base_size1 1))
(define-fun mul_6 () Int (* src_mask__base_stride1 sub_3))
(define-fun add_4 () Int (+ add_3 mul_6))
(define-fun mul_7 () Int (* src_mask__base_size0 src_mask__base_size1))
(define-fun eq_9 () Bool (= mul_7 0))
(define-fun not__10 () Bool (not eq_9))
(assert not__10)
(define-fun eq_10 () Bool (= src_mask__base_size1 1))
(define-fun not__11 () Bool (not eq_10))
(assert not__11)
(define-fun eq_11 () Bool (= src_mask__base_stride1 1))
(define-fun not__12 () Bool (not eq_11))
(assert not__12)
(define-fun lt_3 () Bool (< src_mask__base_size1 2))
(define-fun not__13 () Bool (not lt_3))
(assert not__13)
(define-fun lt_4 () Bool (< src_mask__base_size0 2))
(define-fun not__14 () Bool (not lt_4))
(assert not__14)
(define-fun lt_5 () Bool (< src_mask__base_stride1 src_mask__base_stride0))
(define-fun not__15 () Bool (not lt_5))
(assert not__15)
(define-fun eq_12 () Bool (= src_mask__base_stride0 1))
(assert eq_12)
(define-fun eq_13 () Bool (= src_mask__base_stride1 src_mask__base_size0))
(assert eq_13)
(define-fun ge_5 () Bool (>= src_mask__base_storage_offset 0))
(assert ge_5)
(define-fun add_5 () Int (+ src_mask__base_storage_offset add_4))
(declare-const src_mask_size0 Int)
(set-info :example-src_mask_size0 4)
(declare-const src_mask_size1 Int)
(set-info :example-src_mask_size1 1)
(declare-const src_mask_size2 Int)
(set-info :example-src_mask_size2 24)
(declare-const src_mask_stride0 Int)
(set-info :example-src_mask_stride0 1)
(declare-const src_mask_stride1 Int)
(set-info :example-src_mask_stride1 96)
(declare-const src_mask_stride2 Int)
(set-info :example-src_mask_stride2 4)
(declare-const src_mask_storage_offset Int)
(set-info :example-src_mask_storage_offset 0)
(define-fun mul_8 () Int (* src_mask_size0 src_mask_size1))
(define-fun mul_9 () Int (* mul_8 src_mask_size2))
(define-fun eq_14 () Bool (= mul_9 0))
(define-fun not__16 () Bool (not eq_14))
(assert not__16)
(define-fun eq_15 () Bool (= src_mask_size2 1))
(define-fun not__17 () Bool (not eq_15))
(assert not__17)
(define-fun eq_16 () Bool (= src_mask_stride2 1))
(define-fun not__18 () Bool (not eq_16))
(assert not__18)
(define-fun lt_6 () Bool (< src_mask_size1 2))
(assert lt_6)
(define-fun lt_7 () Bool (< src_mask_size2 2))
(define-fun not__19 () Bool (not lt_7))
(assert not__19)
(define-fun lt_8 () Bool (< src_mask_size0 2))
(define-fun not__20 () Bool (not lt_8))
(assert not__20)
(define-fun lt_9 () Bool (< src_mask_stride2 src_mask_stride0))
(define-fun not__21 () Bool (not lt_9))
(assert not__21)
(define-fun eq_17 () Bool (= src_mask_stride0 1))
(assert eq_17)
(define-fun eq_18 () Bool (= src_mask_stride2 src_mask_size0))
(assert eq_18)
(define-fun mul_10 () Int (* src_mask_size0 src_mask_size2))
(define-fun lt_10 () Bool (< src_seq_size1 0))
(define-fun not__22 () Bool (not lt_10))
(assert not__22)
(define-fun lt_11 () Bool (< src_seq_size0 0))
(define-fun not__23 () Bool (not lt_11))
(assert not__23)
(define-fun eq_19 () Bool (= src_seq_size0 src_seq_size0))
(assert eq_19)
(define-fun eq_20 () Bool (= src_seq_size1 src_seq_size1))
(assert eq_20)
(define-fun mul_11 () Int (* 512 src_seq_size1))
(define-fun mul_12 () Int (* mul_11 src_seq_size0))
(define-fun mul_13 () Int (* mul_11 sub))
(define-fun add_6 () Int (+ 1 mul_13))
(define-fun mul_14 () Int (* 512 sub_1))
(define-fun add_7 () Int (+ add_6 mul_14))
(define-fun add_8 () Int (+ add_7 511))
(define-fun mul_15 () Int (* 4 add_8))
(define-fun mul_16 () Int (* mul_3 512))
(define-fun eq_21 () Bool (= mul_16 0))
(define-fun not__24 () Bool (not eq_21))
(assert not__24)
(define-fun eq_22 () Bool (= src_seq_size0 1))
(define-fun not__25 () Bool (not eq_22))
(assert not__25)
(define-fun eq_23 () Bool (= mul_11 mul_11))
(assert eq_23)
(declare-const self_position_enc_pos_table_size0 Int)
(set-info :example-self_position_enc_pos_table_size0 1)
(declare-const self_position_enc_pos_table_size1 Int)
(set-info :example-self_position_enc_pos_table_size1 200)
(declare-const self_position_enc_pos_table_size2 Int)
(set-info :example-self_position_enc_pos_table_size2 512)
(declare-const self_position_enc_pos_table_stride0 Int)
(set-info :example-self_position_enc_pos_table_stride0 102400)
(declare-const self_position_enc_pos_table_stride1 Int)
(set-info :example-self_position_enc_pos_table_stride1 512)
(declare-const self_position_enc_pos_table_stride2 Int)
(set-info :example-self_position_enc_pos_table_stride2 1)
(declare-const self_position_enc_pos_table_storage_offset Int)
(set-info :example-self_position_enc_pos_table_storage_offset 0)
(define-fun ge_6 () Bool (>= self_position_enc_pos_table_size0 0))
(assert ge_6)
(define-fun ge_7 () Bool (>= self_position_enc_pos_table_size1 0))
(assert ge_7)
(define-fun ge_8 () Bool (>= self_position_enc_pos_table_size2 0))
(assert ge_8)
(define-fun eq_24 () Bool (= self_position_enc_pos_table_size0 0))
(define-fun not__26 () Bool (not eq_24))
(assert not__26)
(define-fun sub_4 () Int (- self_position_enc_pos_table_size0 1))
(define-fun mul_17 () Int (* self_position_enc_pos_table_stride0 sub_4))
(define-fun add_9 () Int (+ 1 mul_17))
(define-fun eq_25 () Bool (= self_position_enc_pos_table_size1 0))
(define-fun not__27 () Bool (not eq_25))
(assert not__27)
(define-fun sub_5 () Int (- self_position_enc_pos_table_size1 1))
(define-fun mul_18 () Int (* self_position_enc_pos_table_stride1 sub_5))
(define-fun add_10 () Int (+ add_9 mul_18))
(define-fun eq_26 () Bool (= self_position_enc_pos_table_size2 0))
(define-fun not__28 () Bool (not eq_26))
(assert not__28)
(define-fun sub_6 () Int (- self_position_enc_pos_table_size2 1))
(define-fun mul_19 () Int (* self_position_enc_pos_table_stride2 sub_6))
(define-fun add_11 () Int (+ add_10 mul_19))
(define-fun mul_20 () Int (* 4 add_11))
(define-fun mul_21 () Int (* self_position_enc_pos_table_size0 self_position_enc_pos_table_size1))
(define-fun mul_22 () Int (* mul_21 self_position_enc_pos_table_size2))
(define-fun eq_27 () Bool (= mul_22 0))
(define-fun not__29 () Bool (not eq_27))
(assert not__29)
(define-fun eq_28 () Bool (= self_position_enc_pos_table_size2 1))
(define-fun not__30 () Bool (not eq_28))
(assert not__30)
(define-fun eq_29 () Bool (= self_position_enc_pos_table_stride2 1))
(assert eq_29)
(define-fun eq_30 () Bool (= self_position_enc_pos_table_size1 1))
(define-fun not__31 () Bool (not eq_30))
(assert not__31)
(define-fun eq_31 () Bool (= self_position_enc_pos_table_stride1 self_position_enc_pos_table_size2))
(assert eq_31)
(define-fun mul_23 () Int (* self_position_enc_pos_table_size2 self_position_enc_pos_table_size1))
(define-fun eq_32 () Bool (= self_position_enc_pos_table_size0 1))
(assert eq_32)
(define-fun ge_9 () Bool (>= self_position_enc_pos_table_storage_offset 0))
(assert ge_9)
(define-fun add_12 () Int (+ self_position_enc_pos_table_storage_offset add_11))
(define-fun mul_24 () Int (* 4 add_12))
(define-fun eq_33 () Bool (= mul_4 0))
(define-fun not__32 () Bool (not eq_33))
(assert not__32)
(define-fun eq_34 () Bool (= mul_15 0))
(define-fun not__33 () Bool (not eq_34))
(assert not__33)
(define-fun output0_size0 () Int src_seq_size0)
(define-fun output0_size1 () Int src_seq_size1)
(define-fun output0_size2 () Int 512)
(define-fun output0_stride0 () Int mul_11)
(define-fun output0_stride1 () Int 512)
(define-fun output0_stride2 () Int 1)
(define-fun output0_storage_offset () Int 0)
(check-sat)
(get-value (src_seq_size0 src_seq_size1 src_seq_stride0 src_seq_stride1 src_seq_storage_offset src_mask__base_size0 src_mask__base_size1 src_mask__base_stride0 src_mask__base_stride1 src_mask__base_storage_offset src_mask_size0 src_mask_size1 src_mask_size2 src_mask_stride0 src_mask_stride1 src_mask_stride2 src_mask_storage_offset self_position_enc_pos_table_size0 self_position_enc_pos_table_size1 self_position_enc_pos_table_size2 self_position_enc_pos_table_stride0 self_position_enc_pos_table_stride1 self_position_enc_pos_table_stride2 self_position_enc_pos_table_storage_offset output0_size0 output0_size1 output0_size2 output0_stride0 output0_stride1 output0_stride2 output0_storage_offset))
