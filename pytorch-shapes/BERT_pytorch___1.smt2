(set-option :produce-models true)
(define-fun ceil ((x Real)) Int (ite (= (to_int x) x) (to_int x) (+ (to_int x) 1)))
(define-fun min2 ((x Int) (y Int)) Int (ite (< x y) x y))
(define-fun max2 ((x Int) (y Int)) Int (ite (> x y) x y))
(define-fun sqrt ((x Real)) Real (^ x 0.5))

(declare-const sequence_size0 Int)
(set-info :example-sequence_size0 4)
(declare-const sequence_size1 Int)
(set-info :example-sequence_size1 128)
(declare-const sequence_stride0 Int)
(set-info :example-sequence_stride0 128)
(declare-const sequence_stride1 Int)
(set-info :example-sequence_stride1 1)
(declare-const sequence_storage_offset Int)
(set-info :example-sequence_storage_offset 0)
(define-fun ge () Bool (>= sequence_size0 0))
(assert ge)
(define-fun ge_1 () Bool (>= sequence_size1 0))
(assert ge_1)
(define-fun eq () Bool (= sequence_size0 0))
(define-fun not_ () Bool (not eq))
(assert not_)
(define-fun sub () Int (- sequence_size0 1))
(define-fun mul () Int (* sequence_stride0 sub))
(define-fun add () Int (+ 1 mul))
(define-fun eq_1 () Bool (= sequence_size1 0))
(define-fun not__1 () Bool (not eq_1))
(assert not__1)
(define-fun sub_1 () Int (- sequence_size1 1))
(define-fun mul_1 () Int (* sequence_stride1 sub_1))
(define-fun add_1 () Int (+ add mul_1))
(define-fun mul_2 () Int (* 8 add_1))
(define-fun mul_3 () Int (* sequence_size0 sequence_size1))
(define-fun eq_2 () Bool (= mul_3 0))
(define-fun not__2 () Bool (not eq_2))
(assert not__2)
(define-fun eq_3 () Bool (= sequence_size1 1))
(define-fun not__3 () Bool (not eq_3))
(assert not__3)
(define-fun eq_4 () Bool (= sequence_stride1 1))
(assert eq_4)
(define-fun eq_5 () Bool (= sequence_size0 1))
(define-fun not__4 () Bool (not eq_5))
(assert not__4)
(define-fun eq_6 () Bool (= sequence_stride0 sequence_size1))
(assert eq_6)
(define-fun mul_4 () Int (* sequence_size1 sequence_size0))
(define-fun ge_2 () Bool (>= sequence_storage_offset 0))
(assert ge_2)
(define-fun add_2 () Int (+ sequence_storage_offset add_1))
(define-fun mul_5 () Int (* 8 add_2))
(declare-const segment_label_size0 Int)
(set-info :example-segment_label_size0 4)
(declare-const segment_label_size1 Int)
(set-info :example-segment_label_size1 128)
(declare-const segment_label_stride0 Int)
(set-info :example-segment_label_stride0 128)
(declare-const segment_label_stride1 Int)
(set-info :example-segment_label_stride1 1)
(declare-const segment_label_storage_offset Int)
(set-info :example-segment_label_storage_offset 0)
(define-fun ge_3 () Bool (>= segment_label_size0 0))
(assert ge_3)
(define-fun ge_4 () Bool (>= segment_label_size1 0))
(assert ge_4)
(define-fun eq_7 () Bool (= segment_label_size0 0))
(define-fun not__5 () Bool (not eq_7))
(assert not__5)
(define-fun sub_2 () Int (- segment_label_size0 1))
(define-fun mul_6 () Int (* segment_label_stride0 sub_2))
(define-fun add_3 () Int (+ 1 mul_6))
(define-fun eq_8 () Bool (= segment_label_size1 0))
(define-fun not__6 () Bool (not eq_8))
(assert not__6)
(define-fun sub_3 () Int (- segment_label_size1 1))
(define-fun mul_7 () Int (* segment_label_stride1 sub_3))
(define-fun add_4 () Int (+ add_3 mul_7))
(define-fun mul_8 () Int (* 8 add_4))
(define-fun mul_9 () Int (* segment_label_size0 segment_label_size1))
(define-fun eq_9 () Bool (= mul_9 0))
(define-fun not__7 () Bool (not eq_9))
(assert not__7)
(define-fun eq_10 () Bool (= segment_label_size1 1))
(define-fun not__8 () Bool (not eq_10))
(assert not__8)
(define-fun eq_11 () Bool (= segment_label_stride1 1))
(assert eq_11)
(define-fun eq_12 () Bool (= segment_label_size0 1))
(define-fun not__9 () Bool (not eq_12))
(assert not__9)
(define-fun eq_13 () Bool (= segment_label_stride0 segment_label_size1))
(assert eq_13)
(define-fun mul_10 () Int (* segment_label_size1 segment_label_size0))
(define-fun ge_5 () Bool (>= segment_label_storage_offset 0))
(assert ge_5)
(define-fun add_5 () Int (+ segment_label_storage_offset add_4))
(define-fun mul_11 () Int (* 8 add_5))
(define-fun lt () Bool (< sequence_size1 0))
(define-fun not__10 () Bool (not lt))
(assert not__10)
(define-fun lt_1 () Bool (< sequence_size0 0))
(define-fun not__11 () Bool (not lt_1))
(assert not__11)
(define-fun eq_14 () Bool (= sequence_size0 sequence_size0))
(assert eq_14)
(define-fun eq_15 () Bool (= sequence_size1 sequence_size1))
(assert eq_15)
(define-fun mul_12 () Int (* 768 sequence_size1))
(define-fun mul_13 () Int (* mul_12 sequence_size0))
(define-fun mul_14 () Int (* mul_12 sub))
(define-fun add_6 () Int (+ 1 mul_14))
(define-fun mul_15 () Int (* 768 sub_1))
(define-fun add_7 () Int (+ add_6 mul_15))
(define-fun add_8 () Int (+ add_7 767))
(define-fun mul_16 () Int (* 4 add_8))
(define-fun mul_17 () Int (* mul_3 768))
(define-fun eq_16 () Bool (= mul_17 0))
(define-fun not__12 () Bool (not eq_16))
(assert not__12)
(define-fun eq_17 () Bool (= mul_12 mul_12))
(assert eq_17)
(declare-const self_position_pe_size0 Int)
(set-info :example-self_position_pe_size0 1)
(declare-const self_position_pe_size1 Int)
(set-info :example-self_position_pe_size1 512)
(declare-const self_position_pe_size2 Int)
(set-info :example-self_position_pe_size2 768)
(declare-const self_position_pe_stride0 Int)
(set-info :example-self_position_pe_stride0 393216)
(declare-const self_position_pe_stride1 Int)
(set-info :example-self_position_pe_stride1 768)
(declare-const self_position_pe_stride2 Int)
(set-info :example-self_position_pe_stride2 1)
(declare-const self_position_pe_storage_offset Int)
(set-info :example-self_position_pe_storage_offset 0)
(define-fun ge_6 () Bool (>= self_position_pe_size0 0))
(assert ge_6)
(define-fun ge_7 () Bool (>= self_position_pe_size1 0))
(assert ge_7)
(define-fun ge_8 () Bool (>= self_position_pe_size2 0))
(assert ge_8)
(define-fun eq_18 () Bool (= self_position_pe_size0 0))
(define-fun not__13 () Bool (not eq_18))
(assert not__13)
(define-fun sub_4 () Int (- self_position_pe_size0 1))
(define-fun mul_18 () Int (* self_position_pe_stride0 sub_4))
(define-fun add_9 () Int (+ 1 mul_18))
(define-fun eq_19 () Bool (= self_position_pe_size1 0))
(define-fun not__14 () Bool (not eq_19))
(assert not__14)
(define-fun sub_5 () Int (- self_position_pe_size1 1))
(define-fun mul_19 () Int (* self_position_pe_stride1 sub_5))
(define-fun add_10 () Int (+ add_9 mul_19))
(define-fun eq_20 () Bool (= self_position_pe_size2 0))
(define-fun not__15 () Bool (not eq_20))
(assert not__15)
(define-fun sub_6 () Int (- self_position_pe_size2 1))
(define-fun mul_20 () Int (* self_position_pe_stride2 sub_6))
(define-fun add_11 () Int (+ add_10 mul_20))
(define-fun mul_21 () Int (* 4 add_11))
(define-fun mul_22 () Int (* self_position_pe_size0 self_position_pe_size1))
(define-fun mul_23 () Int (* mul_22 self_position_pe_size2))
(define-fun eq_21 () Bool (= mul_23 0))
(define-fun not__16 () Bool (not eq_21))
(assert not__16)
(define-fun eq_22 () Bool (= self_position_pe_size2 1))
(define-fun not__17 () Bool (not eq_22))
(assert not__17)
(define-fun eq_23 () Bool (= self_position_pe_stride2 1))
(assert eq_23)
(define-fun eq_24 () Bool (= self_position_pe_size1 1))
(define-fun not__18 () Bool (not eq_24))
(assert not__18)
(define-fun eq_25 () Bool (= self_position_pe_stride1 self_position_pe_size2))
(assert eq_25)
(define-fun mul_24 () Int (* self_position_pe_size2 self_position_pe_size1))
(define-fun eq_26 () Bool (= self_position_pe_size0 1))
(assert eq_26)
(define-fun ge_9 () Bool (>= self_position_pe_storage_offset 0))
(assert ge_9)
(define-fun add_12 () Int (+ self_position_pe_storage_offset add_11))
(define-fun mul_25 () Int (* 4 add_12))
(define-fun eq_27 () Bool (= mul_5 0))
(define-fun not__19 () Bool (not eq_27))
(assert not__19)
(define-fun eq_28 () Bool (= mul_16 0))
(define-fun not__20 () Bool (not eq_28))
(assert not__20)
(define-fun output0_size0 () Int sequence_size0)
(define-fun output0_size1 () Int sequence_size1)
(define-fun output0_size2 () Int 768)
(define-fun output0_stride0 () Int mul_12)
(define-fun output0_stride1 () Int 768)
(define-fun output0_stride2 () Int 1)
(define-fun output0_storage_offset () Int 0)
(check-sat)
(get-value (sequence_size0 sequence_size1 sequence_stride0 sequence_stride1 sequence_storage_offset segment_label_size0 segment_label_size1 segment_label_stride0 segment_label_stride1 segment_label_storage_offset self_position_pe_size0 self_position_pe_size1 self_position_pe_size2 self_position_pe_stride0 self_position_pe_stride1 self_position_pe_stride2 self_position_pe_storage_offset output0_size0 output0_size1 output0_size2 output0_stride0 output0_stride1 output0_stride2 output0_storage_offset))
