(set-option :produce-models true)
(declare-const ___stack0_size0 Int)
(declare-const ___stack0_size1 Int)
(declare-const ___stack0_size2 Int)
(declare-const ___stack0_size3 Int)
(declare-const ___stack0_stride0 Int)
(declare-const ___stack0_stride1 Int)
(declare-const ___stack0_stride2 Int)
(declare-const ___stack0_stride3 Int)
(declare-const ___stack0_storage_offset Int)
(define-fun ge () Bool (>= ___stack0_size0 0))
(assert ge)
(define-fun ge_1 () Bool (>= ___stack0_size1 0))
(assert ge_1)
(define-fun ge_2 () Bool (>= ___stack0_size2 0))
(assert ge_2)
(define-fun ge_3 () Bool (>= ___stack0_size3 0))
(assert ge_3)
(define-fun eq () Bool (= ___stack0_size0 0))
(define-fun not_ () Bool (not eq))
(assert not_)
(define-fun sub () Int (- ___stack0_size0 1))
(define-fun mul () Int (* ___stack0_stride0 sub))
(define-fun add () Int (+ 1 mul))
(define-fun eq_1 () Bool (= ___stack0_size1 0))
(define-fun not__1 () Bool (not eq_1))
(assert not__1)
(define-fun sub_1 () Int (- ___stack0_size1 1))
(define-fun mul_1 () Int (* ___stack0_stride1 sub_1))
(define-fun add_1 () Int (+ add mul_1))
(define-fun eq_2 () Bool (= ___stack0_size2 0))
(define-fun not__2 () Bool (not eq_2))
(assert not__2)
(define-fun sub_2 () Int (- ___stack0_size2 1))
(define-fun mul_2 () Int (* ___stack0_stride2 sub_2))
(define-fun add_2 () Int (+ add_1 mul_2))
(define-fun eq_3 () Bool (= ___stack0_size3 0))
(define-fun not__3 () Bool (not eq_3))
(assert not__3)
(define-fun sub_3 () Int (- ___stack0_size3 1))
(define-fun mul_3 () Int (* ___stack0_stride3 sub_3))
(define-fun add_3 () Int (+ add_2 mul_3))
(define-fun mul_4 () Int (* 4 add_3))
(define-fun mul_5 () Int (* ___stack0_size0 ___stack0_size1))
(define-fun mul_6 () Int (* mul_5 ___stack0_size2))
(define-fun mul_7 () Int (* mul_6 ___stack0_size3))
(define-fun eq_4 () Bool (= mul_7 0))
(define-fun not__4 () Bool (not eq_4))
(assert not__4)
(define-fun eq_5 () Bool (= ___stack0_size3 1))
(define-fun not__5 () Bool (not eq_5))
(assert not__5)
(define-fun eq_6 () Bool (= ___stack0_stride3 1))
(assert eq_6)
(define-fun eq_7 () Bool (= ___stack0_size2 1))
(define-fun not__6 () Bool (not eq_7))
(assert not__6)
(define-fun eq_8 () Bool (= ___stack0_stride2 ___stack0_size3))
(assert eq_8)
(define-fun mul_8 () Int (* ___stack0_size3 ___stack0_size2))
(define-fun eq_9 () Bool (= ___stack0_size1 1))
(define-fun not__7 () Bool (not eq_9))
(assert not__7)
(define-fun eq_10 () Bool (= ___stack0_stride1 mul_8))
(assert eq_10)
(define-fun mul_9 () Int (* mul_8 ___stack0_size1))
(define-fun eq_11 () Bool (= ___stack0_size0 1))
(assert eq_11)
(define-fun eq_12 () Bool (= ___stack0_stride1 1))
(define-fun not__8 () Bool (not eq_12))
(assert not__8)
(define-fun eq_13 () Bool (= ___stack0_stride1 0))
(define-fun not__9 () Bool (not eq_13))
(assert not__9)
(define-fun lt () Bool (< ___stack0_stride1 0))
(define-fun not__10 () Bool (not lt))
(assert not__10)
(define-fun gt () Bool (> ___stack0_size1 1))
(assert gt)
(define-fun mul_10 () Int (* ___stack0_stride1 ___stack0_size1))
(define-fun lt_1 () Bool (< ___stack0_stride3 mul_10))
(assert lt_1)
(define-fun eq_14 () Bool (= ___stack0_size0 ___stack0_size0))
(assert eq_14)
(define-fun eq_15 () Bool (= ___stack0_size1 ___stack0_size1))
(assert eq_15)
(define-fun eq_16 () Bool (= ___stack0_size2 ___stack0_size2))
(assert eq_16)
(define-fun eq_17 () Bool (= ___stack0_size3 ___stack0_size3))
(assert eq_17)
(define-fun eq_18 () Bool (= ___stack0_stride3 0))
(define-fun not__11 () Bool (not eq_18))
(assert not__11)
(define-fun eq_19 () Bool (= ___stack0_stride2 0))
(define-fun not__12 () Bool (not eq_19))
(assert not__12)
(define-fun lt_2 () Bool (< ___stack0_stride3 ___stack0_stride2))
(assert lt_2)
(define-fun lt_3 () Bool (< ___stack0_stride2 ___stack0_stride1))
(assert lt_3)
(define-fun eq_20 () Bool (= ___stack0_stride0 0))
(define-fun not__13 () Bool (not eq_20))
(assert not__13)
(define-fun lt_4 () Bool (< ___stack0_stride1 ___stack0_stride0))
(assert lt_4)
(define-fun mul_11 () Int (* mul_9 ___stack0_size0))
(define-fun mul_12 () Int (* mul_9 sub))
(define-fun add_4 () Int (+ 1 mul_12))
(define-fun mul_13 () Int (* mul_8 sub_1))
(define-fun add_5 () Int (+ add_4 mul_13))
(define-fun mul_14 () Int (* ___stack0_size3 sub_2))
(define-fun add_6 () Int (+ add_5 mul_14))
(define-fun add_7 () Int (+ add_6 sub_3))
(define-fun mul_15 () Int (* 4 add_7))
(define-fun eq_21 () Bool (= mul_8 mul_8))
(assert eq_21)
(define-fun eq_22 () Bool (= mul_8 1))
(define-fun not__14 () Bool (not eq_22))
(assert not__14)
(define-fun eq_23 () Bool (= mul_8 0))
(define-fun not__15 () Bool (not eq_23))
(assert not__15)
(define-fun lt_5 () Bool (< mul_8 0))
(define-fun not__16 () Bool (not lt_5))
(assert not__16)
(define-fun lt_6 () Bool (< 1 mul_9))
(assert lt_6)
(define-fun ge_4 () Bool (>= ___stack0_storage_offset 0))
(assert ge_4)
(define-fun add_8 () Int (+ ___stack0_storage_offset add_3))
(define-fun mul_16 () Int (* 4 add_8))
(define-fun eq_24 () Bool (= mul_16 0))
(define-fun not__17 () Bool (not eq_24))
(assert not__17)
(check-sat)
(get-model)
