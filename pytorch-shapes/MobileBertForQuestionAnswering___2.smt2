(set-option :produce-models true)
(define-fun ceil ((x Real)) Int (ite (= (to_int x) x) (to_int x) (+ (to_int x) 1)))
(define-fun min2 ((x Int) (y Int)) Int (ite (< x y) x y))
(define-fun max2 ((x Int) (y Int)) Int (ite (> x y) x y))
(define-fun sqrt ((x Real)) Real (^ x 0.5))

(declare-const input_tensor_size0 Int)
(set-info :example-input_tensor_size0 1)
(declare-const input_tensor_size1 Int)
(set-info :example-input_tensor_size1 128)
(declare-const input_tensor_size2 Int)
(set-info :example-input_tensor_size2 512)
(declare-const input_tensor_stride0 Int)
(set-info :example-input_tensor_stride0 65536)
(declare-const input_tensor_stride1 Int)
(set-info :example-input_tensor_stride1 512)
(declare-const input_tensor_stride2 Int)
(set-info :example-input_tensor_stride2 1)
(declare-const input_tensor_storage_offset Int)
(set-info :example-input_tensor_storage_offset 0)
(define-fun ge () Bool (>= input_tensor_size0 0))
(assert ge)
(define-fun ge_1 () Bool (>= input_tensor_size1 0))
(assert ge_1)
(define-fun ge_2 () Bool (>= input_tensor_size2 0))
(assert ge_2)
(define-fun eq () Bool (= input_tensor_size0 0))
(define-fun not_ () Bool (not eq))
(assert not_)
(define-fun sub () Int (- input_tensor_size0 1))
(define-fun mul () Int (* input_tensor_stride0 sub))
(define-fun add () Int (+ 1 mul))
(define-fun eq_1 () Bool (= input_tensor_size1 0))
(define-fun not__1 () Bool (not eq_1))
(assert not__1)
(define-fun sub_1 () Int (- input_tensor_size1 1))
(define-fun mul_1 () Int (* input_tensor_stride1 sub_1))
(define-fun add_1 () Int (+ add mul_1))
(define-fun eq_2 () Bool (= input_tensor_size2 0))
(define-fun not__2 () Bool (not eq_2))
(assert not__2)
(define-fun sub_2 () Int (- input_tensor_size2 1))
(define-fun mul_2 () Int (* input_tensor_stride2 sub_2))
(define-fun add_2 () Int (+ add_1 mul_2))
(define-fun mul_3 () Int (* 4 add_2))
(define-fun mul_4 () Int (* input_tensor_size0 input_tensor_size1))
(define-fun mul_5 () Int (* mul_4 input_tensor_size2))
(define-fun eq_3 () Bool (= mul_5 0))
(define-fun not__3 () Bool (not eq_3))
(assert not__3)
(define-fun eq_4 () Bool (= input_tensor_size2 1))
(define-fun not__4 () Bool (not eq_4))
(assert not__4)
(define-fun eq_5 () Bool (= input_tensor_stride2 1))
(assert eq_5)
(define-fun eq_6 () Bool (= input_tensor_size1 1))
(define-fun not__5 () Bool (not eq_6))
(assert not__5)
(define-fun eq_7 () Bool (= input_tensor_stride1 input_tensor_size2))
(assert eq_7)
(define-fun mul_6 () Int (* input_tensor_size2 input_tensor_size1))
(define-fun eq_8 () Bool (= input_tensor_size0 1))
(assert eq_8)
(define-fun eq_9 () Bool (= input_tensor_size0 input_tensor_size0))
(assert eq_9)
(define-fun eq_10 () Bool (= input_tensor_size1 input_tensor_size1))
(assert eq_10)
(define-fun eq_11 () Bool (= input_tensor_size2 input_tensor_size2))
(assert eq_11)
(define-fun eq_12 () Bool (= input_tensor_stride2 0))
(define-fun not__6 () Bool (not eq_12))
(assert not__6)
(define-fun eq_13 () Bool (= input_tensor_stride1 0))
(define-fun not__7 () Bool (not eq_13))
(assert not__7)
(define-fun lt () Bool (< input_tensor_stride2 input_tensor_stride1))
(assert lt)
(define-fun eq_14 () Bool (= input_tensor_stride0 0))
(define-fun not__8 () Bool (not eq_14))
(assert not__8)
(define-fun lt_1 () Bool (< input_tensor_stride1 input_tensor_stride0))
(assert lt_1)
(define-fun mul_7 () Int (* mul_6 input_tensor_size0))
(define-fun mul_8 () Int (* mul_6 sub))
(define-fun add_3 () Int (+ 1 mul_8))
(define-fun mul_9 () Int (* input_tensor_size2 sub_1))
(define-fun add_4 () Int (+ add_3 mul_9))
(define-fun add_5 () Int (+ add_4 sub_2))
(define-fun mul_10 () Int (* 4 add_5))
(define-fun ge_3 () Bool (>= input_tensor_storage_offset 0))
(assert ge_3)
(define-fun add_6 () Int (+ input_tensor_storage_offset add_2))
(define-fun mul_11 () Int (* 4 add_6))
(define-fun lt_2 () Bool (< input_tensor_size2 0))
(define-fun not__9 () Bool (not lt_2))
(assert not__9)
(define-fun lt_3 () Bool (< input_tensor_size1 0))
(define-fun not__10 () Bool (not lt_3))
(assert not__10)
(define-fun lt_4 () Bool (< input_tensor_size0 0))
(define-fun not__11 () Bool (not lt_4))
(assert not__11)
(define-fun eq_15 () Bool (= input_tensor_size2 512))
(assert eq_15)
(define-fun eq_16 () Bool (= input_tensor_size2 -1))
(define-fun not__12 () Bool (not eq_16))
(assert not__12)
(define-fun eq_17 () Bool (= 0 input_tensor_size2))
(define-fun not__13 () Bool (not eq_17))
(assert not__13)
(define-fun lt_5 () Bool (< input_tensor_size1 2))
(define-fun not__14 () Bool (not lt_5))
(assert not__14)
(define-fun lt_6 () Bool (< input_tensor_size0 2))
(assert lt_6)
(define-fun lt_7 () Bool (< input_tensor_size2 2))
(define-fun not__15 () Bool (not lt_7))
(assert not__15)
(define-fun gt () Bool (> input_tensor_size2 1))
(assert gt)
(define-fun eq_18 () Bool (= mul_6 0))
(define-fun not__16 () Bool (not eq_18))
(assert not__16)
(define-fun lt_8 () Bool (< input_tensor_size2 mul_6))
(assert lt_8)
(define-fun eq_19 () Bool (= mul_11 0))
(define-fun not__17 () Bool (not eq_19))
(assert not__17)
(define-fun eq_20 () Bool (= mul_10 0))
(define-fun not__18 () Bool (not eq_20))
(assert not__18)
(define-fun output0_size0 () Int input_tensor_size0)
(define-fun output0_size1 () Int input_tensor_size1)
(define-fun output0_size2 () Int input_tensor_size2)
(define-fun output0_stride0 () Int mul_6)
(define-fun output0_stride1 () Int input_tensor_size2)
(define-fun output0_stride2 () Int 1)
(define-fun output0_storage_offset () Int 0)
(check-sat)
(get-value (input_tensor_size0 input_tensor_size1 input_tensor_size2 input_tensor_stride0 input_tensor_stride1 input_tensor_stride2 input_tensor_storage_offset output0_size0 output0_size1 output0_size2 output0_stride0 output0_stride1 output0_stride2 output0_storage_offset))
