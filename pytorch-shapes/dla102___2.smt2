(set-option :produce-models true)
(declare-const pred__base_size0 Int)
(declare-const pred__base_size1 Int)
(declare-const pred__base_size2 Int)
(declare-const pred__base_size3 Int)
(declare-const pred__base_stride0 Int)
(declare-const pred__base_stride1 Int)
(declare-const pred__base_stride2 Int)
(declare-const pred__base_stride3 Int)
(declare-const pred__base_storage_offset Int)
(define-fun ge () Bool (>= pred__base_size0 0))
(assert ge)
(define-fun ge_1 () Bool (>= pred__base_size1 0))
(assert ge_1)
(define-fun ge_2 () Bool (>= pred__base_size2 0))
(assert ge_2)
(define-fun ge_3 () Bool (>= pred__base_size3 0))
(assert ge_3)
(define-fun eq () Bool (= pred__base_size0 0))
(define-fun not_ () Bool (not eq))
(assert not_)
(define-fun sub () Int (- pred__base_size0 1))
(define-fun mul () Int (* pred__base_stride0 sub))
(define-fun add () Int (+ 1 mul))
(define-fun eq_1 () Bool (= pred__base_size1 0))
(define-fun not__1 () Bool (not eq_1))
(assert not__1)
(define-fun sub_1 () Int (- pred__base_size1 1))
(define-fun mul_1 () Int (* pred__base_stride1 sub_1))
(define-fun add_1 () Int (+ add mul_1))
(define-fun eq_2 () Bool (= pred__base_size2 0))
(define-fun not__2 () Bool (not eq_2))
(assert not__2)
(define-fun sub_2 () Int (- pred__base_size2 1))
(define-fun mul_2 () Int (* pred__base_stride2 sub_2))
(define-fun add_2 () Int (+ add_1 mul_2))
(define-fun eq_3 () Bool (= pred__base_size3 0))
(define-fun not__3 () Bool (not eq_3))
(assert not__3)
(define-fun sub_3 () Int (- pred__base_size3 1))
(define-fun mul_3 () Int (* pred__base_stride3 sub_3))
(define-fun add_3 () Int (+ add_2 mul_3))
(define-fun mul_4 () Int (* 4 add_3))
(define-fun mul_5 () Int (* pred__base_size0 pred__base_size1))
(define-fun mul_6 () Int (* mul_5 pred__base_size2))
(define-fun mul_7 () Int (* mul_6 pred__base_size3))
(define-fun eq_4 () Bool (= mul_7 0))
(define-fun not__4 () Bool (not eq_4))
(assert not__4)
(define-fun eq_5 () Bool (= pred__base_size3 1))
(assert eq_5)
(define-fun eq_6 () Bool (= pred__base_size2 1))
(assert eq_6)
(define-fun eq_7 () Bool (= pred__base_size1 1))
(define-fun not__5 () Bool (not eq_7))
(assert not__5)
(define-fun eq_8 () Bool (= pred__base_stride1 1))
(assert eq_8)
(define-fun eq_9 () Bool (= pred__base_size0 1))
(define-fun not__6 () Bool (not eq_9))
(assert not__6)
(define-fun eq_10 () Bool (= pred__base_stride0 pred__base_size1))
(assert eq_10)
(define-fun mul_8 () Int (* pred__base_size1 pred__base_size0))
(define-fun eq_11 () Bool (= pred__base_stride1 0))
(define-fun not__7 () Bool (not eq_11))
(assert not__7)
(define-fun lt () Bool (< pred__base_stride1 0))
(define-fun not__8 () Bool (not lt))
(assert not__8)
(define-fun gt () Bool (> pred__base_size1 1))
(assert gt)
(define-fun mul_9 () Int (* pred__base_stride1 pred__base_size1))
(define-fun lt_1 () Bool (< pred__base_stride3 mul_9))
(assert lt_1)
(define-fun ge_4 () Bool (>= pred__base_storage_offset 0))
(assert ge_4)
(define-fun add_4 () Int (+ pred__base_storage_offset add_3))
(define-fun mul_10 () Int (* 4 add_4))
(declare-const pred_size0 Int)
(declare-const pred_size1 Int)
(declare-const pred_stride0 Int)
(declare-const pred_stride1 Int)
(declare-const pred_storage_offset Int)
(define-fun eq_12 () Bool (= pred__base_size0 -1))
(define-fun not__9 () Bool (not eq_12))
(assert not__9)
(define-fun eq_13 () Bool (= pred__base_size1 -1))
(define-fun not__10 () Bool (not eq_13))
(assert not__10)
(define-fun eq_14 () Bool (= pred__base_size2 -1))
(define-fun not__11 () Bool (not eq_14))
(assert not__11)
(define-fun eq_15 () Bool (= pred__base_size3 -1))
(define-fun not__12 () Bool (not eq_15))
(assert not__12)
(define-fun eq_16 () Bool (= mul_7 mul_7))
(assert eq_16)
(define-fun eq_17 () Bool (= pred__base_size0 pred__base_size0))
(assert eq_17)
(define-fun eq_18 () Bool (= pred__base_size1 pred__base_size1))
(assert eq_18)
(define-fun eq_19 () Bool (= pred__base_size2 pred__base_size2))
(assert eq_19)
(define-fun eq_20 () Bool (= pred__base_size3 pred__base_size3))
(assert eq_20)
(define-fun mul_11 () Int (* pred_size0 pred_size1))
(define-fun eq_21 () Bool (= mul_11 0))
(define-fun not__13 () Bool (not eq_21))
(assert not__13)
(define-fun eq_22 () Bool (= pred_size1 1))
(define-fun not__14 () Bool (not eq_22))
(assert not__14)
(define-fun eq_23 () Bool (= pred_stride1 1))
(assert eq_23)
(define-fun eq_24 () Bool (= pred_size0 1))
(define-fun not__15 () Bool (not eq_24))
(assert not__15)
(define-fun eq_25 () Bool (= pred_stride0 pred_size1))
(assert eq_25)
(define-fun mul_12 () Int (* pred_size1 pred_size0))
(declare-const self_target_size0 Int)
(declare-const self_target_stride0 Int)
(declare-const self_target_storage_offset Int)
(define-fun ge_5 () Bool (>= self_target_size0 0))
(assert ge_5)
(define-fun eq_26 () Bool (= self_target_size0 0))
(define-fun not__16 () Bool (not eq_26))
(assert not__16)
(define-fun sub_4 () Int (- self_target_size0 1))
(define-fun mul_13 () Int (* self_target_stride0 sub_4))
(define-fun add_5 () Int (+ 1 mul_13))
(define-fun mul_14 () Int (* 8 add_5))
(define-fun eq_27 () Bool (= self_target_size0 1))
(define-fun not__17 () Bool (not eq_27))
(assert not__17)
(define-fun eq_28 () Bool (= self_target_stride0 1))
(assert eq_28)
(define-fun ge_6 () Bool (>= self_target_storage_offset 0))
(assert ge_6)
(define-fun add_6 () Int (+ self_target_storage_offset add_5))
(define-fun mul_15 () Int (* 8 add_6))
(define-fun eq_29 () Bool (= pred_size1 1000))
(assert eq_29)
(define-fun ge_7 () Bool (>= pred_size0 0))
(assert ge_7)
(define-fun eq_30 () Bool (= pred_size0 0))
(define-fun not__18 () Bool (not eq_30))
(assert not__18)
(define-fun sub_5 () Int (- pred_size0 1))
(define-fun add_7 () Int (+ 1 sub_5))
(define-fun mul_16 () Int (* 4 add_7))
(define-fun eq_31 () Bool (= pred_size0 pred_size0))
(assert eq_31)
(define-fun lt_2 () Bool (< pred_size1 0))
(define-fun not__19 () Bool (not lt_2))
(assert not__19)
(define-fun lt_3 () Bool (< pred_size0 0))
(define-fun not__20 () Bool (not lt_3))
(assert not__20)
(define-fun eq_32 () Bool (= pred_size1 pred_size1))
(assert eq_32)
(define-fun eq_33 () Bool (= pred_size0 -1))
(define-fun not__21 () Bool (not eq_33))
(assert not__21)
(define-fun eq_34 () Bool (= pred_size1 -1))
(define-fun not__22 () Bool (not eq_34))
(assert not__22)
(define-fun ge_8 () Bool (>= pred_size1 0))
(assert ge_8)
(define-fun lt_4 () Bool (< pred_size1 2))
(define-fun not__23 () Bool (not lt_4))
(assert not__23)
(define-fun lt_5 () Bool (< pred_size0 2))
(define-fun not__24 () Bool (not lt_5))
(assert not__24)
(define-fun eq_35 () Bool (= pred_stride1 0))
(define-fun not__25 () Bool (not eq_35))
(assert not__25)
(define-fun eq_36 () Bool (= pred_stride0 0))
(define-fun not__26 () Bool (not eq_36))
(assert not__26)
(define-fun lt_6 () Bool (< pred_stride1 pred_stride0))
(assert lt_6)
(define-fun eq_37 () Bool (= pred_size1 0))
(define-fun not__27 () Bool (not eq_37))
(assert not__27)
(define-fun mul_17 () Int (* pred_size1 sub_5))
(define-fun add_8 () Int (+ 1 mul_17))
(define-fun sub_6 () Int (- pred_size1 1))
(define-fun add_9 () Int (+ add_8 sub_6))
(define-fun mul_18 () Int (* 4 add_9))
(define-fun gt_1 () Bool (> pred_size1 1))
(assert gt_1)
(define-fun lt_7 () Bool (< pred_size0 1))
(define-fun not__28 () Bool (not lt_7))
(assert not__28)
(define-fun eq_38 () Bool (= mul_11 mul_11))
(assert eq_38)
(define-fun eq_39 () Bool (= pred_size0 self_target_size0))
(assert eq_39)
(define-fun eq_40 () Bool (= self_target_size0 self_target_size0))
(assert eq_40)
(define-fun le () Bool (<= self_target_size0 pred_size0))
(assert le)
(define-fun add_10 () Int (+ 1 sub_4))
(define-fun mul_19 () Int (* 4 add_10))
(define-fun mul_20 () Real (* 1.0 self_target_size0))
(define-fun sym_float () Real (to_real self_target_size0))
(define-fun eq_41 () Bool (= mul_10 0))
(define-fun not__29 () Bool (not eq_41))
(assert not__29)
(define-fun eq_42 () Bool (= mul_15 0))
(define-fun not__30 () Bool (not eq_42))
(assert not__30)
(define-fun output0_storage_offset () Int 0)
(check-sat)
(get-model)
