(set-option :produce-models true)
(declare-const labels_size0 Int)
(declare-const labels_stride0 Int)
(declare-const labels_storage_offset Int)
(define-fun ge () Bool (>= labels_size0 0))
(assert ge)
(define-fun eq () Bool (= labels_size0 0))
(define-fun not_ () Bool (not eq))
(assert not_)
(define-fun sub () Int (- labels_size0 1))
(define-fun mul () Int (* labels_stride0 sub))
(define-fun add () Int (+ 1 mul))
(define-fun mul_1 () Int (* 8 add))
(define-fun eq_1 () Bool (= labels_size0 1))
(assert eq_1)
(define-fun ge_1 () Bool (>= labels_storage_offset 0))
(assert ge_1)
(define-fun add_1 () Int (+ labels_storage_offset add))
(define-fun mul_2 () Int (* 8 add_1))
(declare-const outputs_last_hidden_state_size0 Int)
(declare-const outputs_last_hidden_state_size1 Int)
(declare-const outputs_last_hidden_state_size2 Int)
(declare-const outputs_last_hidden_state_stride0 Int)
(declare-const outputs_last_hidden_state_stride1 Int)
(declare-const outputs_last_hidden_state_stride2 Int)
(declare-const outputs_last_hidden_state_storage_offset Int)
(define-fun ge_2 () Bool (>= outputs_last_hidden_state_size0 0))
(assert ge_2)
(define-fun ge_3 () Bool (>= outputs_last_hidden_state_size1 0))
(assert ge_3)
(define-fun ge_4 () Bool (>= outputs_last_hidden_state_size2 0))
(assert ge_4)
(define-fun eq_2 () Bool (= outputs_last_hidden_state_size0 0))
(define-fun not__1 () Bool (not eq_2))
(assert not__1)
(define-fun sub_1 () Int (- outputs_last_hidden_state_size0 1))
(define-fun mul_3 () Int (* outputs_last_hidden_state_stride0 sub_1))
(define-fun add_2 () Int (+ 1 mul_3))
(define-fun eq_3 () Bool (= outputs_last_hidden_state_size1 0))
(define-fun not__2 () Bool (not eq_3))
(assert not__2)
(define-fun sub_2 () Int (- outputs_last_hidden_state_size1 1))
(define-fun mul_4 () Int (* outputs_last_hidden_state_stride1 sub_2))
(define-fun add_3 () Int (+ add_2 mul_4))
(define-fun eq_4 () Bool (= outputs_last_hidden_state_size2 0))
(define-fun not__3 () Bool (not eq_4))
(assert not__3)
(define-fun sub_3 () Int (- outputs_last_hidden_state_size2 1))
(define-fun mul_5 () Int (* outputs_last_hidden_state_stride2 sub_3))
(define-fun add_4 () Int (+ add_3 mul_5))
(define-fun mul_6 () Int (* 4 add_4))
(define-fun mul_7 () Int (* outputs_last_hidden_state_size0 outputs_last_hidden_state_size1))
(define-fun mul_8 () Int (* mul_7 outputs_last_hidden_state_size2))
(define-fun eq_5 () Bool (= mul_8 0))
(define-fun not__4 () Bool (not eq_5))
(assert not__4)
(define-fun eq_6 () Bool (= outputs_last_hidden_state_size2 1))
(define-fun not__5 () Bool (not eq_6))
(assert not__5)
(define-fun eq_7 () Bool (= outputs_last_hidden_state_stride2 1))
(assert eq_7)
(define-fun eq_8 () Bool (= outputs_last_hidden_state_size1 1))
(define-fun not__6 () Bool (not eq_8))
(assert not__6)
(define-fun eq_9 () Bool (= outputs_last_hidden_state_stride1 outputs_last_hidden_state_size2))
(assert eq_9)
(define-fun mul_9 () Int (* outputs_last_hidden_state_size2 outputs_last_hidden_state_size1))
(define-fun eq_10 () Bool (= outputs_last_hidden_state_size0 1))
(assert eq_10)
(define-fun eq_11 () Bool (= outputs_last_hidden_state_size0 outputs_last_hidden_state_size0))
(assert eq_11)
(define-fun eq_12 () Bool (= outputs_last_hidden_state_size1 outputs_last_hidden_state_size1))
(assert eq_12)
(define-fun eq_13 () Bool (= outputs_last_hidden_state_size2 outputs_last_hidden_state_size2))
(assert eq_13)
(define-fun eq_14 () Bool (= outputs_last_hidden_state_stride2 0))
(define-fun not__7 () Bool (not eq_14))
(assert not__7)
(define-fun eq_15 () Bool (= outputs_last_hidden_state_stride1 0))
(define-fun not__8 () Bool (not eq_15))
(assert not__8)
(define-fun lt () Bool (< outputs_last_hidden_state_stride2 outputs_last_hidden_state_stride1))
(assert lt)
(define-fun eq_16 () Bool (= outputs_last_hidden_state_stride0 0))
(define-fun not__9 () Bool (not eq_16))
(assert not__9)
(define-fun lt_1 () Bool (< outputs_last_hidden_state_stride1 outputs_last_hidden_state_stride0))
(assert lt_1)
(define-fun mul_10 () Int (* mul_9 outputs_last_hidden_state_size0))
(define-fun mul_11 () Int (* mul_9 sub_1))
(define-fun add_5 () Int (+ 1 mul_11))
(define-fun mul_12 () Int (* outputs_last_hidden_state_size2 sub_2))
(define-fun add_6 () Int (+ add_5 mul_12))
(define-fun add_7 () Int (+ add_6 sub_3))
(define-fun mul_13 () Int (* 4 add_7))
(define-fun ge_5 () Bool (>= outputs_last_hidden_state_storage_offset 0))
(assert ge_5)
(define-fun add_8 () Int (+ outputs_last_hidden_state_storage_offset add_4))
(define-fun mul_14 () Int (* 4 add_8))
(declare-const outputs_pooler_output_size0 Int)
(declare-const outputs_pooler_output_size1 Int)
(declare-const outputs_pooler_output_stride0 Int)
(declare-const outputs_pooler_output_stride1 Int)
(declare-const outputs_pooler_output_storage_offset Int)
(define-fun ge_6 () Bool (>= outputs_pooler_output_size0 0))
(assert ge_6)
(define-fun ge_7 () Bool (>= outputs_pooler_output_size1 0))
(assert ge_7)
(define-fun eq_17 () Bool (= outputs_pooler_output_size0 0))
(define-fun not__10 () Bool (not eq_17))
(assert not__10)
(define-fun sub_4 () Int (- outputs_pooler_output_size0 1))
(define-fun mul_15 () Int (* outputs_pooler_output_stride0 sub_4))
(define-fun add_9 () Int (+ 1 mul_15))
(define-fun eq_18 () Bool (= outputs_pooler_output_size1 0))
(define-fun not__11 () Bool (not eq_18))
(assert not__11)
(define-fun sub_5 () Int (- outputs_pooler_output_size1 1))
(define-fun mul_16 () Int (* outputs_pooler_output_stride1 sub_5))
(define-fun add_10 () Int (+ add_9 mul_16))
(define-fun mul_17 () Int (* 4 add_10))
(define-fun mul_18 () Int (* outputs_pooler_output_size0 outputs_pooler_output_size1))
(define-fun eq_19 () Bool (= mul_18 0))
(define-fun not__12 () Bool (not eq_19))
(assert not__12)
(define-fun eq_20 () Bool (= outputs_pooler_output_size1 1))
(define-fun not__13 () Bool (not eq_20))
(assert not__13)
(define-fun eq_21 () Bool (= outputs_pooler_output_stride1 1))
(assert eq_21)
(define-fun eq_22 () Bool (= outputs_pooler_output_size0 1))
(assert eq_22)
(define-fun eq_23 () Bool (= outputs_pooler_output_size0 outputs_pooler_output_size0))
(assert eq_23)
(define-fun eq_24 () Bool (= outputs_pooler_output_size1 outputs_pooler_output_size1))
(assert eq_24)
(define-fun eq_25 () Bool (= outputs_pooler_output_stride1 0))
(define-fun not__14 () Bool (not eq_25))
(assert not__14)
(define-fun eq_26 () Bool (= outputs_pooler_output_stride0 0))
(define-fun not__15 () Bool (not eq_26))
(assert not__15)
(define-fun lt_2 () Bool (< outputs_pooler_output_stride1 outputs_pooler_output_stride0))
(assert lt_2)
(define-fun mul_19 () Int (* outputs_pooler_output_size1 outputs_pooler_output_size0))
(define-fun mul_20 () Int (* outputs_pooler_output_size1 sub_4))
(define-fun add_11 () Int (+ 1 mul_20))
(define-fun add_12 () Int (+ add_11 sub_5))
(define-fun mul_21 () Int (* 4 add_12))
(define-fun ge_8 () Bool (>= outputs_pooler_output_storage_offset 0))
(assert ge_8)
(define-fun add_13 () Int (+ outputs_pooler_output_storage_offset add_10))
(define-fun mul_22 () Int (* 4 add_13))
(declare-const logits_size0 Int)
(declare-const logits_size1 Int)
(declare-const logits_stride0 Int)
(declare-const logits_stride1 Int)
(declare-const logits_storage_offset Int)
(define-fun ge_9 () Bool (>= logits_size0 0))
(assert ge_9)
(define-fun ge_10 () Bool (>= logits_size1 0))
(assert ge_10)
(define-fun eq_27 () Bool (= logits_size0 0))
(define-fun not__16 () Bool (not eq_27))
(assert not__16)
(define-fun sub_6 () Int (- logits_size0 1))
(define-fun mul_23 () Int (* logits_stride0 sub_6))
(define-fun add_14 () Int (+ 1 mul_23))
(define-fun eq_28 () Bool (= logits_size1 0))
(define-fun not__17 () Bool (not eq_28))
(assert not__17)
(define-fun sub_7 () Int (- logits_size1 1))
(define-fun mul_24 () Int (* logits_stride1 sub_7))
(define-fun add_15 () Int (+ add_14 mul_24))
(define-fun mul_25 () Int (* 4 add_15))
(define-fun mul_26 () Int (* logits_size0 logits_size1))
(define-fun eq_29 () Bool (= mul_26 0))
(define-fun not__18 () Bool (not eq_29))
(assert not__18)
(define-fun eq_30 () Bool (= logits_size1 1))
(define-fun not__19 () Bool (not eq_30))
(assert not__19)
(define-fun eq_31 () Bool (= logits_stride1 1))
(assert eq_31)
(define-fun eq_32 () Bool (= logits_size0 1))
(assert eq_32)
(define-fun eq_33 () Bool (= logits_size0 logits_size0))
(assert eq_33)
(define-fun eq_34 () Bool (= logits_size1 logits_size1))
(assert eq_34)
(define-fun eq_35 () Bool (= logits_stride1 0))
(define-fun not__20 () Bool (not eq_35))
(assert not__20)
(define-fun eq_36 () Bool (= logits_stride0 0))
(define-fun not__21 () Bool (not eq_36))
(assert not__21)
(define-fun lt_3 () Bool (< logits_stride1 logits_stride0))
(assert lt_3)
(define-fun mul_27 () Int (* logits_size1 logits_size0))
(define-fun mul_28 () Int (* logits_size1 sub_6))
(define-fun add_16 () Int (+ 1 mul_28))
(define-fun add_17 () Int (+ add_16 sub_7))
(define-fun mul_29 () Int (* 4 add_17))
(define-fun ge_11 () Bool (>= logits_storage_offset 0))
(assert ge_11)
(define-fun add_18 () Int (+ logits_storage_offset add_15))
(define-fun mul_30 () Int (* 4 add_18))
(define-fun eq_37 () Bool (= mul_26 2))
(assert eq_37)
(define-fun floordiv () Int (div mul_26 2))
(define-fun eq_38 () Bool (= logits_size0 floordiv))
(assert eq_38)
(define-fun eq_39 () Bool (= logits_size1 2))
(assert eq_39)
(define-fun floordiv_1 () Int (div labels_size0 1))
(define-fun eq_40 () Bool (= labels_size0 floordiv_1))
(assert eq_40)
(define-fun add_19 () Int (+ 1 sub_6))
(define-fun mul_31 () Int (* 4 add_19))
(define-fun lt_4 () Bool (< logits_size1 0))
(define-fun not__22 () Bool (not lt_4))
(assert not__22)
(define-fun lt_5 () Bool (< logits_size0 0))
(define-fun not__23 () Bool (not lt_5))
(assert not__23)
(define-fun eq_41 () Bool (= logits_size0 -1))
(define-fun not__24 () Bool (not eq_41))
(assert not__24)
(define-fun eq_42 () Bool (= logits_size1 -1))
(define-fun not__25 () Bool (not eq_42))
(assert not__25)
(define-fun lt_6 () Bool (< logits_size1 2))
(define-fun not__26 () Bool (not lt_6))
(assert not__26)
(define-fun lt_7 () Bool (< logits_size0 2))
(assert lt_7)
(define-fun gt () Bool (> logits_size1 1))
(assert gt)
(define-fun lt_8 () Bool (< logits_size0 1))
(define-fun not__27 () Bool (not lt_8))
(assert not__27)
(define-fun eq_43 () Bool (= mul_26 mul_26))
(assert eq_43)
(define-fun eq_44 () Bool (= logits_size0 labels_size0))
(assert eq_44)
(define-fun eq_45 () Bool (= labels_size0 labels_size0))
(assert eq_45)
(define-fun le () Bool (<= labels_size0 logits_size0))
(assert le)
(define-fun add_20 () Int (+ 1 sub))
(define-fun mul_32 () Int (* 4 add_20))
(define-fun mul_33 () Real (* 1.0 labels_size0))
(define-fun sym_float () Real (to_real labels_size0))
(define-fun eq_46 () Bool (= mul_2 0))
(define-fun not__28 () Bool (not eq_46))
(assert not__28)
(define-fun eq_47 () Bool (= mul_30 0))
(define-fun not__29 () Bool (not eq_47))
(assert not__29)
(define-fun output0_storage_offset () Int 0)
(check-sat)
(get-model)
