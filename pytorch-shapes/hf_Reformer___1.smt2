(set-option :produce-models true)
(define-fun ceil ((x Real)) Int (ite (= (to_int x) x) (to_int x) (+ (to_int x) 1)))
(define-fun min2 ((x Int) (y Int)) Int (ite (< x y) x y))
(define-fun max2 ((x Int) (y Int)) Int (ite (> x y) x y))
(define-fun sqrt ((x Real)) Real (^ x 0.5))

(declare-const input_ids_size0 Int)
(set-info :example-input_ids_size0 4)
(declare-const input_ids_size1 Int)
(set-info :example-input_ids_size1 4096)
(declare-const input_ids_stride0 Int)
(set-info :example-input_ids_stride0 4096)
(declare-const input_ids_stride1 Int)
(set-info :example-input_ids_stride1 1)
(declare-const input_ids_storage_offset Int)
(set-info :example-input_ids_storage_offset 0)
(define-fun ge () Bool (>= input_ids_size0 0))
(assert ge)
(define-fun ge_1 () Bool (>= input_ids_size1 0))
(assert ge_1)
(define-fun eq () Bool (= input_ids_size0 0))
(define-fun not_ () Bool (not eq))
(assert not_)
(define-fun sub () Int (- input_ids_size0 1))
(define-fun mul () Int (* input_ids_stride0 sub))
(define-fun add () Int (+ 1 mul))
(define-fun eq_1 () Bool (= input_ids_size1 0))
(define-fun not__1 () Bool (not eq_1))
(assert not__1)
(define-fun sub_1 () Int (- input_ids_size1 1))
(define-fun mul_1 () Int (* input_ids_stride1 sub_1))
(define-fun add_1 () Int (+ add mul_1))
(define-fun mul_2 () Int (* 8 add_1))
(define-fun mul_3 () Int (* input_ids_size0 input_ids_size1))
(define-fun eq_2 () Bool (= mul_3 0))
(define-fun not__2 () Bool (not eq_2))
(assert not__2)
(define-fun eq_3 () Bool (= input_ids_size1 1))
(define-fun not__3 () Bool (not eq_3))
(assert not__3)
(define-fun eq_4 () Bool (= input_ids_stride1 1))
(assert eq_4)
(define-fun eq_5 () Bool (= input_ids_size0 1))
(define-fun not__4 () Bool (not eq_5))
(assert not__4)
(define-fun eq_6 () Bool (= input_ids_stride0 input_ids_size1))
(assert eq_6)
(define-fun mul_4 () Int (* input_ids_size1 input_ids_size0))
(define-fun ge_2 () Bool (>= input_ids_storage_offset 0))
(assert ge_2)
(define-fun add_2 () Int (+ input_ids_storage_offset add_1))
(define-fun mul_5 () Int (* 8 add_2))
(define-fun sub_2 () Int (- input_ids_size1 0))
(define-fun ge_3 () Bool (>= sub_2 0))
(assert ge_3)
(define-fun eq_7 () Bool (= sub_2 0))
(define-fun not__5 () Bool (not eq_7))
(assert not__5)
(define-fun sub_3 () Int (- sub_2 1))
(define-fun add_3 () Int (+ 1 sub_3))
(define-fun mul_6 () Int (* 8 add_3))
(define-fun eq_8 () Bool (= sub_2 1))
(define-fun not__6 () Bool (not eq_8))
(assert not__6)
(define-fun eq_9 () Bool (= sub_2 sub_2))
(assert eq_9)
(define-fun eq_10 () Bool (= input_ids_size0 -1))
(define-fun not__7 () Bool (not eq_10))
(assert not__7)
(define-fun eq_11 () Bool (= input_ids_size1 sub_2))
(assert eq_11)
(define-fun eq_12 () Bool (= input_ids_size1 -1))
(define-fun not__8 () Bool (not eq_12))
(assert not__8)
(define-fun eq_13 () Bool (= sub_2 input_ids_size1))
(assert eq_13)
(define-fun eq_14 () Bool (= 0 input_ids_size1))
(define-fun not__9 () Bool (not eq_14))
(assert not__9)
(define-fun lt () Bool (< input_ids_size1 2))
(define-fun not__10 () Bool (not lt))
(assert not__10)
(define-fun lt_1 () Bool (< input_ids_size0 2))
(define-fun not__11 () Bool (not lt_1))
(assert not__11)
(define-fun lt_2 () Bool (< input_ids_size1 0))
(define-fun not__12 () Bool (not lt_2))
(assert not__12)
(define-fun lt_3 () Bool (< input_ids_size0 0))
(define-fun not__13 () Bool (not lt_3))
(assert not__13)
(define-fun eq_15 () Bool (= input_ids_size0 input_ids_size0))
(assert eq_15)
(define-fun eq_16 () Bool (= input_ids_size1 input_ids_size1))
(assert eq_16)
(define-fun mul_7 () Int (* 256 input_ids_size1))
(define-fun mul_8 () Int (* mul_7 input_ids_size0))
(define-fun mul_9 () Int (* mul_7 sub))
(define-fun add_4 () Int (+ 1 mul_9))
(define-fun mul_10 () Int (* 256 sub_1))
(define-fun add_5 () Int (+ add_4 mul_10))
(define-fun add_6 () Int (+ add_5 255))
(define-fun mul_11 () Int (* 4 add_6))
(define-fun mul_12 () Int (* mul_3 256))
(define-fun eq_17 () Bool (= mul_12 0))
(define-fun not__14 () Bool (not eq_17))
(assert not__14)
(define-fun eq_18 () Bool (= mul_7 mul_7))
(assert eq_18)
(define-fun gt () Bool (> input_ids_size1 4096))
(define-fun not__15 () Bool (not gt))
(assert not__15)
(define-fun gt_1 () Bool (> mul_12 0))
(assert gt_1)
(define-fun eq_19 () Bool (= mul_7 0))
(define-fun not__16 () Bool (not eq_19))
(assert not__16)
(define-fun gt_2 () Bool (> mul_7 256))
(assert gt_2)
(define-fun lt_4 () Bool (< mul_12 2))
(define-fun not__17 () Bool (not lt_4))
(assert not__17)
(define-fun mul_13 () Int (* input_ids_size0 64))
(define-fun mul_14 () Int (* mul_13 64))
(define-fun mul_15 () Int (* mul_14 64))
(define-fun eq_20 () Bool (= mul_15 0))
(define-fun not__18 () Bool (not eq_20))
(assert not__18)
(define-fun mul_16 () Int (* mul_14 192))
(define-fun eq_21 () Bool (= mul_16 0))
(define-fun not__19 () Bool (not eq_21))
(assert not__19)
(define-fun eq_22 () Bool (= input_ids_size1 4096))
(assert eq_22)
(define-fun mul_17 () Int (* 1048576 input_ids_size0))
(define-fun mul_18 () Int (* 1048576 sub))
(define-fun add_7 () Int (+ 1 mul_18))
(define-fun add_8 () Int (+ add_7 1032192))
(define-fun add_9 () Int (+ add_8 16128))
(define-fun add_10 () Int (+ add_9 255))
(define-fun mul_19 () Int (* 4 add_10))
(define-fun mul_20 () Int (* mul_14 256))
(define-fun eq_23 () Bool (= mul_20 0))
(define-fun not__20 () Bool (not eq_23))
(assert not__20)
(define-fun mul_21 () Int (* 64 input_ids_size0))
(define-fun mul_22 () Int (* 64 sub))
(define-fun add_11 () Int (+ 1 mul_22))
(define-fun add_12 () Int (+ add_11 63))
(define-fun mul_23 () Int (* 4 add_12))
(define-fun eq_24 () Bool (= mul_13 0))
(define-fun not__21 () Bool (not eq_24))
(assert not__21)
(define-fun add_13 () Int (+ add_7 16128))
(define-fun add_14 () Int (+ add_13 1032192))
(define-fun add_15 () Int (+ add_14 255))
(define-fun mul_24 () Int (* 4 add_15))
(define-fun eq_25 () Bool (= mul_20 mul_3))
(define-fun not__22 () Bool (not eq_25))
(assert not__22)
(define-fun gt_3 () Bool (> mul_3 0))
(assert gt_3)
(define-fun mod () Int (mod mul_20 mul_3))
(define-fun eq_26 () Bool (= mod 0))
(assert eq_26)
(define-fun floordiv () Int (div mul_20 mul_3))
(define-fun lt_5 () Bool (< 1 mul_17))
(assert lt_5)
(define-fun lt_6 () Bool (< floordiv mul_17))
(assert lt_6)
(define-fun mul_25 () Int (* floordiv input_ids_size1))
(define-fun lt_7 () Bool (< mul_25 mul_17))
(assert lt_7)
(define-fun mul_26 () Int (* mul_25 input_ids_size0))
(define-fun eq_27 () Bool (= mul_26 mul_17))
(assert eq_27)
(define-fun eq_28 () Bool (= floordiv -1))
(define-fun not__23 () Bool (not eq_28))
(assert not__23)
(define-fun ge_4 () Bool (>= floordiv 0))
(assert ge_4)
(define-fun mul_27 () Int (* mul_3 floordiv))
(define-fun eq_29 () Bool (= mul_20 mul_27))
(assert eq_29)
(define-fun eq_30 () Bool (= input_ids_size1 64))
(define-fun not__24 () Bool (not eq_30))
(assert not__24)
(define-fun mod_1 () Int (mod 64 input_ids_size1))
(define-fun eq_31 () Bool (= mod_1 0))
(define-fun not__25 () Bool (not eq_31))
(assert not__25)
(define-fun mod_2 () Int (mod 4096 input_ids_size1))
(define-fun eq_32 () Bool (= mod_2 0))
(assert eq_32)
(define-fun gt_4 () Bool (> mul_20 0))
(assert gt_4)
(define-fun mul_28 () Int (* input_ids_size0 4096))
(define-fun mul_29 () Int (* mul_28 256))
(define-fun eq_33 () Bool (= mul_29 0))
(define-fun not__26 () Bool (not eq_33))
(assert not__26)
(define-fun eq_34 () Bool (= floordiv 256))
(assert eq_34)
(define-fun eq_35 () Bool (= mul_5 0))
(define-fun not__27 () Bool (not eq_35))
(assert not__27)
(define-fun eq_36 () Bool (= mul_11 0))
(define-fun not__28 () Bool (not eq_36))
(assert not__28)
(define-fun output0_size0 () Int input_ids_size0)
(define-fun output0_size1 () Int input_ids_size1)
(define-fun output0_size2 () Int 256)
(define-fun output0_stride0 () Int mul_7)
(define-fun output0_stride1 () Int 256)
(define-fun output0_stride2 () Int 1)
(define-fun output0_storage_offset () Int 0)
(check-sat)
(get-value (input_ids_size0 input_ids_size1 input_ids_stride0 input_ids_stride1 input_ids_storage_offset output0_size0 output0_size1 output0_size2 output0_stride0 output0_stride1 output0_stride2 output0_storage_offset))
