(set-option :produce-models true)
(define-fun ceil ((x Real)) Int (ite (= (to_int x) x) (to_int x) (+ (to_int x) 1)))
(define-fun min2 ((x Int) (y Int)) Int (ite (< x y) x y))
(define-fun max2 ((x Int) (y Int)) Int (ite (> x y) x y))
(define-fun sqrt ((x Real)) Real (^ x 0.5))

(declare-const ___stack0_0___base_size0 Int)
(set-info :example-___stack0_0___base_size0 128)
(declare-const ___stack0_0___base_size1 Int)
(set-info :example-___stack0_0___base_size1 512)
(declare-const ___stack0_0___base_stride0 Int)
(set-info :example-___stack0_0___base_stride0 512)
(declare-const ___stack0_0___base_stride1 Int)
(set-info :example-___stack0_0___base_stride1 1)
(declare-const ___stack0_0___base_storage_offset Int)
(set-info :example-___stack0_0___base_storage_offset 0)
(define-fun ge () Bool (>= ___stack0_0___base_size0 0))
(assert ge)
(define-fun ge_1 () Bool (>= ___stack0_0___base_size1 0))
(assert ge_1)
(define-fun eq () Bool (= ___stack0_0___base_size0 0))
(define-fun not_ () Bool (not eq))
(assert not_)
(define-fun sub () Int (- ___stack0_0___base_size0 1))
(define-fun mul () Int (* ___stack0_0___base_stride0 sub))
(define-fun add () Int (+ 1 mul))
(define-fun eq_1 () Bool (= ___stack0_0___base_size1 0))
(define-fun not__1 () Bool (not eq_1))
(assert not__1)
(define-fun sub_1 () Int (- ___stack0_0___base_size1 1))
(define-fun mul_1 () Int (* ___stack0_0___base_stride1 sub_1))
(define-fun add_1 () Int (+ add mul_1))
(define-fun mul_2 () Int (* 4 add_1))
(define-fun mul_3 () Int (* ___stack0_0___base_size0 ___stack0_0___base_size1))
(define-fun eq_2 () Bool (= mul_3 0))
(define-fun not__2 () Bool (not eq_2))
(assert not__2)
(define-fun eq_3 () Bool (= ___stack0_0___base_size1 1))
(define-fun not__3 () Bool (not eq_3))
(assert not__3)
(define-fun eq_4 () Bool (= ___stack0_0___base_stride1 1))
(assert eq_4)
(define-fun eq_5 () Bool (= ___stack0_0___base_size0 1))
(define-fun not__4 () Bool (not eq_5))
(assert not__4)
(define-fun eq_6 () Bool (= ___stack0_0___base_stride0 ___stack0_0___base_size1))
(assert eq_6)
(define-fun mul_4 () Int (* ___stack0_0___base_size1 ___stack0_0___base_size0))
(define-fun eq_7 () Bool (= ___stack0_0___base_size0 ___stack0_0___base_size0))
(assert eq_7)
(define-fun eq_8 () Bool (= ___stack0_0___base_size1 ___stack0_0___base_size1))
(assert eq_8)
(define-fun eq_9 () Bool (= ___stack0_0___base_stride1 0))
(define-fun not__5 () Bool (not eq_9))
(assert not__5)
(define-fun eq_10 () Bool (= ___stack0_0___base_stride0 0))
(define-fun not__6 () Bool (not eq_10))
(assert not__6)
(define-fun lt () Bool (< ___stack0_0___base_stride1 ___stack0_0___base_stride0))
(assert lt)
(define-fun mul_5 () Int (* ___stack0_0___base_size1 sub))
(define-fun add_2 () Int (+ 1 mul_5))
(define-fun add_3 () Int (+ add_2 sub_1))
(define-fun mul_6 () Int (* 4 add_3))
(define-fun ge_2 () Bool (>= ___stack0_0___base_storage_offset 0))
(assert ge_2)
(define-fun add_4 () Int (+ ___stack0_0___base_storage_offset add_1))
(define-fun mul_7 () Int (* 4 add_4))
(declare-const ___stack0_0__size0 Int)
(set-info :example-___stack0_0__size0 1)
(declare-const ___stack0_0__size1 Int)
(set-info :example-___stack0_0__size1 128)
(declare-const ___stack0_0__size2 Int)
(set-info :example-___stack0_0__size2 512)
(declare-const ___stack0_0__stride0 Int)
(set-info :example-___stack0_0__stride0 65536)
(declare-const ___stack0_0__stride1 Int)
(set-info :example-___stack0_0__stride1 512)
(declare-const ___stack0_0__stride2 Int)
(set-info :example-___stack0_0__stride2 1)
(declare-const ___stack0_0__storage_offset Int)
(set-info :example-___stack0_0__storage_offset 0)
(define-fun mul_8 () Int (* ___stack0_0__size0 ___stack0_0__size1))
(define-fun mul_9 () Int (* mul_8 ___stack0_0__size2))
(define-fun eq_11 () Bool (= mul_9 0))
(define-fun not__7 () Bool (not eq_11))
(assert not__7)
(define-fun eq_12 () Bool (= ___stack0_0__size2 1))
(define-fun not__8 () Bool (not eq_12))
(assert not__8)
(define-fun eq_13 () Bool (= ___stack0_0__stride2 1))
(assert eq_13)
(define-fun eq_14 () Bool (= ___stack0_0__size1 1))
(define-fun not__9 () Bool (not eq_14))
(assert not__9)
(define-fun eq_15 () Bool (= ___stack0_0__stride1 ___stack0_0__size2))
(assert eq_15)
(define-fun mul_10 () Int (* ___stack0_0__size2 ___stack0_0__size1))
(define-fun eq_16 () Bool (= ___stack0_0__size0 1))
(assert eq_16)
(declare-const ___stack0_2__0__size0 Int)
(set-info :example-___stack0_2__0__size0 1)
(declare-const ___stack0_2__0__size1 Int)
(set-info :example-___stack0_2__0__size1 16)
(declare-const ___stack0_2__0__size2 Int)
(set-info :example-___stack0_2__0__size2 128)
(declare-const ___stack0_2__0__size3 Int)
(set-info :example-___stack0_2__0__size3 32)
(declare-const ___stack0_2__0__stride0 Int)
(set-info :example-___stack0_2__0__stride0 65536)
(declare-const ___stack0_2__0__stride1 Int)
(set-info :example-___stack0_2__0__stride1 4096)
(declare-const ___stack0_2__0__stride2 Int)
(set-info :example-___stack0_2__0__stride2 32)
(declare-const ___stack0_2__0__stride3 Int)
(set-info :example-___stack0_2__0__stride3 1)
(declare-const ___stack0_2__0__storage_offset Int)
(set-info :example-___stack0_2__0__storage_offset 0)
(define-fun ge_3 () Bool (>= ___stack0_2__0__size0 0))
(assert ge_3)
(define-fun ge_4 () Bool (>= ___stack0_2__0__size1 0))
(assert ge_4)
(define-fun ge_5 () Bool (>= ___stack0_2__0__size2 0))
(assert ge_5)
(define-fun ge_6 () Bool (>= ___stack0_2__0__size3 0))
(assert ge_6)
(define-fun eq_17 () Bool (= ___stack0_2__0__size0 0))
(define-fun not__10 () Bool (not eq_17))
(assert not__10)
(define-fun sub_2 () Int (- ___stack0_2__0__size0 1))
(define-fun mul_11 () Int (* ___stack0_2__0__stride0 sub_2))
(define-fun add_5 () Int (+ 1 mul_11))
(define-fun eq_18 () Bool (= ___stack0_2__0__size1 0))
(define-fun not__11 () Bool (not eq_18))
(assert not__11)
(define-fun sub_3 () Int (- ___stack0_2__0__size1 1))
(define-fun mul_12 () Int (* ___stack0_2__0__stride1 sub_3))
(define-fun add_6 () Int (+ add_5 mul_12))
(define-fun eq_19 () Bool (= ___stack0_2__0__size2 0))
(define-fun not__12 () Bool (not eq_19))
(assert not__12)
(define-fun sub_4 () Int (- ___stack0_2__0__size2 1))
(define-fun mul_13 () Int (* ___stack0_2__0__stride2 sub_4))
(define-fun add_7 () Int (+ add_6 mul_13))
(define-fun eq_20 () Bool (= ___stack0_2__0__size3 0))
(define-fun not__13 () Bool (not eq_20))
(assert not__13)
(define-fun sub_5 () Int (- ___stack0_2__0__size3 1))
(define-fun mul_14 () Int (* ___stack0_2__0__stride3 sub_5))
(define-fun add_8 () Int (+ add_7 mul_14))
(define-fun mul_15 () Int (* 4 add_8))
(define-fun mul_16 () Int (* ___stack0_2__0__size0 ___stack0_2__0__size1))
(define-fun mul_17 () Int (* mul_16 ___stack0_2__0__size2))
(define-fun mul_18 () Int (* mul_17 ___stack0_2__0__size3))
(define-fun eq_21 () Bool (= mul_18 0))
(define-fun not__14 () Bool (not eq_21))
(assert not__14)
(define-fun eq_22 () Bool (= ___stack0_2__0__size3 1))
(define-fun not__15 () Bool (not eq_22))
(assert not__15)
(define-fun eq_23 () Bool (= ___stack0_2__0__stride3 1))
(assert eq_23)
(define-fun eq_24 () Bool (= ___stack0_2__0__size2 1))
(define-fun not__16 () Bool (not eq_24))
(assert not__16)
(define-fun eq_25 () Bool (= ___stack0_2__0__stride2 ___stack0_2__0__size3))
(assert eq_25)
(define-fun mul_19 () Int (* ___stack0_2__0__size3 ___stack0_2__0__size2))
(define-fun eq_26 () Bool (= ___stack0_2__0__size1 1))
(define-fun not__17 () Bool (not eq_26))
(assert not__17)
(define-fun eq_27 () Bool (= ___stack0_2__0__stride1 mul_19))
(assert eq_27)
(define-fun mul_20 () Int (* mul_19 ___stack0_2__0__size1))
(define-fun eq_28 () Bool (= ___stack0_2__0__size0 1))
(assert eq_28)
(define-fun eq_29 () Bool (= ___stack0_2__0__stride1 1))
(define-fun not__18 () Bool (not eq_29))
(assert not__18)
(define-fun eq_30 () Bool (= ___stack0_2__0__stride1 0))
(define-fun not__19 () Bool (not eq_30))
(assert not__19)
(define-fun lt_1 () Bool (< ___stack0_2__0__stride1 0))
(define-fun not__20 () Bool (not lt_1))
(assert not__20)
(define-fun gt () Bool (> ___stack0_2__0__size1 1))
(assert gt)
(define-fun mul_21 () Int (* ___stack0_2__0__stride1 ___stack0_2__0__size1))
(define-fun lt_2 () Bool (< ___stack0_2__0__stride3 mul_21))
(assert lt_2)
(define-fun eq_31 () Bool (= ___stack0_2__0__size0 ___stack0_2__0__size0))
(assert eq_31)
(define-fun eq_32 () Bool (= ___stack0_2__0__size1 ___stack0_2__0__size1))
(assert eq_32)
(define-fun eq_33 () Bool (= ___stack0_2__0__size2 ___stack0_2__0__size2))
(assert eq_33)
(define-fun eq_34 () Bool (= ___stack0_2__0__size3 ___stack0_2__0__size3))
(assert eq_34)
(define-fun eq_35 () Bool (= ___stack0_2__0__stride3 0))
(define-fun not__21 () Bool (not eq_35))
(assert not__21)
(define-fun eq_36 () Bool (= ___stack0_2__0__stride2 0))
(define-fun not__22 () Bool (not eq_36))
(assert not__22)
(define-fun lt_3 () Bool (< ___stack0_2__0__stride3 ___stack0_2__0__stride2))
(assert lt_3)
(define-fun lt_4 () Bool (< ___stack0_2__0__stride2 ___stack0_2__0__stride1))
(assert lt_4)
(define-fun eq_37 () Bool (= ___stack0_2__0__stride0 0))
(define-fun not__23 () Bool (not eq_37))
(assert not__23)
(define-fun lt_5 () Bool (< ___stack0_2__0__stride1 ___stack0_2__0__stride0))
(assert lt_5)
(define-fun mul_22 () Int (* mul_20 ___stack0_2__0__size0))
(define-fun mul_23 () Int (* mul_20 sub_2))
(define-fun add_9 () Int (+ 1 mul_23))
(define-fun mul_24 () Int (* mul_19 sub_3))
(define-fun add_10 () Int (+ add_9 mul_24))
(define-fun mul_25 () Int (* ___stack0_2__0__size3 sub_4))
(define-fun add_11 () Int (+ add_10 mul_25))
(define-fun add_12 () Int (+ add_11 sub_5))
(define-fun mul_26 () Int (* 4 add_12))
(define-fun eq_38 () Bool (= mul_19 mul_19))
(assert eq_38)
(define-fun eq_39 () Bool (= mul_19 1))
(define-fun not__24 () Bool (not eq_39))
(assert not__24)
(define-fun eq_40 () Bool (= mul_19 0))
(define-fun not__25 () Bool (not eq_40))
(assert not__25)
(define-fun lt_6 () Bool (< mul_19 0))
(define-fun not__26 () Bool (not lt_6))
(assert not__26)
(define-fun lt_7 () Bool (< 1 mul_20))
(assert lt_7)
(define-fun ge_7 () Bool (>= ___stack0_2__0__storage_offset 0))
(assert ge_7)
(define-fun add_13 () Int (+ ___stack0_2__0__storage_offset add_8))
(define-fun mul_27 () Int (* 4 add_13))
(declare-const ___stack0_2__1__size0 Int)
(set-info :example-___stack0_2__1__size0 1)
(declare-const ___stack0_2__1__size1 Int)
(set-info :example-___stack0_2__1__size1 16)
(declare-const ___stack0_2__1__size2 Int)
(set-info :example-___stack0_2__1__size2 128)
(declare-const ___stack0_2__1__size3 Int)
(set-info :example-___stack0_2__1__size3 32)
(declare-const ___stack0_2__1__stride0 Int)
(set-info :example-___stack0_2__1__stride0 65536)
(declare-const ___stack0_2__1__stride1 Int)
(set-info :example-___stack0_2__1__stride1 4096)
(declare-const ___stack0_2__1__stride2 Int)
(set-info :example-___stack0_2__1__stride2 32)
(declare-const ___stack0_2__1__stride3 Int)
(set-info :example-___stack0_2__1__stride3 1)
(declare-const ___stack0_2__1__storage_offset Int)
(set-info :example-___stack0_2__1__storage_offset 0)
(define-fun ge_8 () Bool (>= ___stack0_2__1__size0 0))
(assert ge_8)
(define-fun ge_9 () Bool (>= ___stack0_2__1__size1 0))
(assert ge_9)
(define-fun ge_10 () Bool (>= ___stack0_2__1__size2 0))
(assert ge_10)
(define-fun ge_11 () Bool (>= ___stack0_2__1__size3 0))
(assert ge_11)
(define-fun eq_41 () Bool (= ___stack0_2__1__size0 0))
(define-fun not__27 () Bool (not eq_41))
(assert not__27)
(define-fun sub_6 () Int (- ___stack0_2__1__size0 1))
(define-fun mul_28 () Int (* ___stack0_2__1__stride0 sub_6))
(define-fun add_14 () Int (+ 1 mul_28))
(define-fun eq_42 () Bool (= ___stack0_2__1__size1 0))
(define-fun not__28 () Bool (not eq_42))
(assert not__28)
(define-fun sub_7 () Int (- ___stack0_2__1__size1 1))
(define-fun mul_29 () Int (* ___stack0_2__1__stride1 sub_7))
(define-fun add_15 () Int (+ add_14 mul_29))
(define-fun eq_43 () Bool (= ___stack0_2__1__size2 0))
(define-fun not__29 () Bool (not eq_43))
(assert not__29)
(define-fun sub_8 () Int (- ___stack0_2__1__size2 1))
(define-fun mul_30 () Int (* ___stack0_2__1__stride2 sub_8))
(define-fun add_16 () Int (+ add_15 mul_30))
(define-fun eq_44 () Bool (= ___stack0_2__1__size3 0))
(define-fun not__30 () Bool (not eq_44))
(assert not__30)
(define-fun sub_9 () Int (- ___stack0_2__1__size3 1))
(define-fun mul_31 () Int (* ___stack0_2__1__stride3 sub_9))
(define-fun add_17 () Int (+ add_16 mul_31))
(define-fun mul_32 () Int (* 4 add_17))
(define-fun mul_33 () Int (* ___stack0_2__1__size0 ___stack0_2__1__size1))
(define-fun mul_34 () Int (* mul_33 ___stack0_2__1__size2))
(define-fun mul_35 () Int (* mul_34 ___stack0_2__1__size3))
(define-fun eq_45 () Bool (= mul_35 0))
(define-fun not__31 () Bool (not eq_45))
(assert not__31)
(define-fun eq_46 () Bool (= ___stack0_2__1__size3 1))
(define-fun not__32 () Bool (not eq_46))
(assert not__32)
(define-fun eq_47 () Bool (= ___stack0_2__1__stride3 1))
(assert eq_47)
(define-fun eq_48 () Bool (= ___stack0_2__1__size2 1))
(define-fun not__33 () Bool (not eq_48))
(assert not__33)
(define-fun eq_49 () Bool (= ___stack0_2__1__stride2 ___stack0_2__1__size3))
(assert eq_49)
(define-fun mul_36 () Int (* ___stack0_2__1__size3 ___stack0_2__1__size2))
(define-fun eq_50 () Bool (= ___stack0_2__1__size1 1))
(define-fun not__34 () Bool (not eq_50))
(assert not__34)
(define-fun eq_51 () Bool (= ___stack0_2__1__stride1 mul_36))
(assert eq_51)
(define-fun mul_37 () Int (* mul_36 ___stack0_2__1__size1))
(define-fun eq_52 () Bool (= ___stack0_2__1__size0 1))
(assert eq_52)
(define-fun eq_53 () Bool (= ___stack0_2__1__stride1 1))
(define-fun not__35 () Bool (not eq_53))
(assert not__35)
(define-fun eq_54 () Bool (= ___stack0_2__1__stride1 0))
(define-fun not__36 () Bool (not eq_54))
(assert not__36)
(define-fun lt_8 () Bool (< ___stack0_2__1__stride1 0))
(define-fun not__37 () Bool (not lt_8))
(assert not__37)
(define-fun gt_1 () Bool (> ___stack0_2__1__size1 1))
(assert gt_1)
(define-fun mul_38 () Int (* ___stack0_2__1__stride1 ___stack0_2__1__size1))
(define-fun lt_9 () Bool (< ___stack0_2__1__stride3 mul_38))
(assert lt_9)
(define-fun eq_55 () Bool (= ___stack0_2__1__size0 ___stack0_2__1__size0))
(assert eq_55)
(define-fun eq_56 () Bool (= ___stack0_2__1__size1 ___stack0_2__1__size1))
(assert eq_56)
(define-fun eq_57 () Bool (= ___stack0_2__1__size2 ___stack0_2__1__size2))
(assert eq_57)
(define-fun eq_58 () Bool (= ___stack0_2__1__size3 ___stack0_2__1__size3))
(assert eq_58)
(define-fun eq_59 () Bool (= ___stack0_2__1__stride3 0))
(define-fun not__38 () Bool (not eq_59))
(assert not__38)
(define-fun eq_60 () Bool (= ___stack0_2__1__stride2 0))
(define-fun not__39 () Bool (not eq_60))
(assert not__39)
(define-fun lt_10 () Bool (< ___stack0_2__1__stride3 ___stack0_2__1__stride2))
(assert lt_10)
(define-fun lt_11 () Bool (< ___stack0_2__1__stride2 ___stack0_2__1__stride1))
(assert lt_11)
(define-fun eq_61 () Bool (= ___stack0_2__1__stride0 0))
(define-fun not__40 () Bool (not eq_61))
(assert not__40)
(define-fun lt_12 () Bool (< ___stack0_2__1__stride1 ___stack0_2__1__stride0))
(assert lt_12)
(define-fun mul_39 () Int (* mul_37 ___stack0_2__1__size0))
(define-fun mul_40 () Int (* mul_37 sub_6))
(define-fun add_18 () Int (+ 1 mul_40))
(define-fun mul_41 () Int (* mul_36 sub_7))
(define-fun add_19 () Int (+ add_18 mul_41))
(define-fun mul_42 () Int (* ___stack0_2__1__size3 sub_8))
(define-fun add_20 () Int (+ add_19 mul_42))
(define-fun add_21 () Int (+ add_20 sub_9))
(define-fun mul_43 () Int (* 4 add_21))
(define-fun eq_62 () Bool (= mul_36 mul_36))
(assert eq_62)
(define-fun eq_63 () Bool (= mul_36 1))
(define-fun not__41 () Bool (not eq_63))
(assert not__41)
(define-fun eq_64 () Bool (= mul_36 0))
(define-fun not__42 () Bool (not eq_64))
(assert not__42)
(define-fun lt_13 () Bool (< mul_36 0))
(define-fun not__43 () Bool (not lt_13))
(assert not__43)
(define-fun lt_14 () Bool (< 1 mul_37))
(assert lt_14)
(define-fun ge_12 () Bool (>= ___stack0_2__1__storage_offset 0))
(assert ge_12)
(define-fun add_22 () Int (+ ___stack0_2__1__storage_offset add_17))
(define-fun mul_44 () Int (* 4 add_22))
(declare-const encoder_hidden_states_size0 Int)
(set-info :example-encoder_hidden_states_size0 1)
(declare-const encoder_hidden_states_size1 Int)
(set-info :example-encoder_hidden_states_size1 128)
(declare-const encoder_hidden_states_size2 Int)
(set-info :example-encoder_hidden_states_size2 512)
(declare-const encoder_hidden_states_stride0 Int)
(set-info :example-encoder_hidden_states_stride0 65536)
(declare-const encoder_hidden_states_stride1 Int)
(set-info :example-encoder_hidden_states_stride1 512)
(declare-const encoder_hidden_states_stride2 Int)
(set-info :example-encoder_hidden_states_stride2 1)
(declare-const encoder_hidden_states_storage_offset Int)
(set-info :example-encoder_hidden_states_storage_offset 0)
(define-fun ge_13 () Bool (>= encoder_hidden_states_size0 0))
(assert ge_13)
(define-fun ge_14 () Bool (>= encoder_hidden_states_size1 0))
(assert ge_14)
(define-fun ge_15 () Bool (>= encoder_hidden_states_size2 0))
(assert ge_15)
(define-fun eq_65 () Bool (= encoder_hidden_states_size0 0))
(define-fun not__44 () Bool (not eq_65))
(assert not__44)
(define-fun sub_10 () Int (- encoder_hidden_states_size0 1))
(define-fun mul_45 () Int (* encoder_hidden_states_stride0 sub_10))
(define-fun add_23 () Int (+ 1 mul_45))
(define-fun eq_66 () Bool (= encoder_hidden_states_size1 0))
(define-fun not__45 () Bool (not eq_66))
(assert not__45)
(define-fun sub_11 () Int (- encoder_hidden_states_size1 1))
(define-fun mul_46 () Int (* encoder_hidden_states_stride1 sub_11))
(define-fun add_24 () Int (+ add_23 mul_46))
(define-fun eq_67 () Bool (= encoder_hidden_states_size2 0))
(define-fun not__46 () Bool (not eq_67))
(assert not__46)
(define-fun sub_12 () Int (- encoder_hidden_states_size2 1))
(define-fun mul_47 () Int (* encoder_hidden_states_stride2 sub_12))
(define-fun add_25 () Int (+ add_24 mul_47))
(define-fun mul_48 () Int (* 4 add_25))
(define-fun mul_49 () Int (* encoder_hidden_states_size0 encoder_hidden_states_size1))
(define-fun mul_50 () Int (* mul_49 encoder_hidden_states_size2))
(define-fun eq_68 () Bool (= mul_50 0))
(define-fun not__47 () Bool (not eq_68))
(assert not__47)
(define-fun eq_69 () Bool (= encoder_hidden_states_size2 1))
(define-fun not__48 () Bool (not eq_69))
(assert not__48)
(define-fun eq_70 () Bool (= encoder_hidden_states_stride2 1))
(assert eq_70)
(define-fun eq_71 () Bool (= encoder_hidden_states_size1 1))
(define-fun not__49 () Bool (not eq_71))
(assert not__49)
(define-fun eq_72 () Bool (= encoder_hidden_states_stride1 encoder_hidden_states_size2))
(assert eq_72)
(define-fun mul_51 () Int (* encoder_hidden_states_size2 encoder_hidden_states_size1))
(define-fun eq_73 () Bool (= encoder_hidden_states_size0 1))
(assert eq_73)
(define-fun eq_74 () Bool (= encoder_hidden_states_size0 encoder_hidden_states_size0))
(assert eq_74)
(define-fun eq_75 () Bool (= encoder_hidden_states_size1 encoder_hidden_states_size1))
(assert eq_75)
(define-fun eq_76 () Bool (= encoder_hidden_states_size2 encoder_hidden_states_size2))
(assert eq_76)
(define-fun eq_77 () Bool (= encoder_hidden_states_stride2 0))
(define-fun not__50 () Bool (not eq_77))
(assert not__50)
(define-fun eq_78 () Bool (= encoder_hidden_states_stride1 0))
(define-fun not__51 () Bool (not eq_78))
(assert not__51)
(define-fun lt_15 () Bool (< encoder_hidden_states_stride2 encoder_hidden_states_stride1))
(assert lt_15)
(define-fun eq_79 () Bool (= encoder_hidden_states_stride0 0))
(define-fun not__52 () Bool (not eq_79))
(assert not__52)
(define-fun lt_16 () Bool (< encoder_hidden_states_stride1 encoder_hidden_states_stride0))
(assert lt_16)
(define-fun mul_52 () Int (* mul_51 encoder_hidden_states_size0))
(define-fun mul_53 () Int (* mul_51 sub_10))
(define-fun add_26 () Int (+ 1 mul_53))
(define-fun mul_54 () Int (* encoder_hidden_states_size2 sub_11))
(define-fun add_27 () Int (+ add_26 mul_54))
(define-fun add_28 () Int (+ add_27 sub_12))
(define-fun mul_55 () Int (* 4 add_28))
(define-fun ge_16 () Bool (>= encoder_hidden_states_storage_offset 0))
(assert ge_16)
(define-fun add_29 () Int (+ encoder_hidden_states_storage_offset add_25))
(define-fun mul_56 () Int (* 4 add_29))
(declare-const residual_size0 Int)
(set-info :example-residual_size0 1)
(declare-const residual_size1 Int)
(set-info :example-residual_size1 128)
(declare-const residual_size2 Int)
(set-info :example-residual_size2 512)
(declare-const residual_stride0 Int)
(set-info :example-residual_stride0 65536)
(declare-const residual_stride1 Int)
(set-info :example-residual_stride1 512)
(declare-const residual_stride2 Int)
(set-info :example-residual_stride2 1)
(declare-const residual_storage_offset Int)
(set-info :example-residual_storage_offset 0)
(define-fun ge_17 () Bool (>= residual_size0 0))
(assert ge_17)
(define-fun ge_18 () Bool (>= residual_size1 0))
(assert ge_18)
(define-fun ge_19 () Bool (>= residual_size2 0))
(assert ge_19)
(define-fun eq_80 () Bool (= residual_size0 0))
(define-fun not__53 () Bool (not eq_80))
(assert not__53)
(define-fun sub_13 () Int (- residual_size0 1))
(define-fun mul_57 () Int (* residual_stride0 sub_13))
(define-fun add_30 () Int (+ 1 mul_57))
(define-fun eq_81 () Bool (= residual_size1 0))
(define-fun not__54 () Bool (not eq_81))
(assert not__54)
(define-fun sub_14 () Int (- residual_size1 1))
(define-fun mul_58 () Int (* residual_stride1 sub_14))
(define-fun add_31 () Int (+ add_30 mul_58))
(define-fun eq_82 () Bool (= residual_size2 0))
(define-fun not__55 () Bool (not eq_82))
(assert not__55)
(define-fun sub_15 () Int (- residual_size2 1))
(define-fun mul_59 () Int (* residual_stride2 sub_15))
(define-fun add_32 () Int (+ add_31 mul_59))
(define-fun mul_60 () Int (* 4 add_32))
(define-fun mul_61 () Int (* residual_size0 residual_size1))
(define-fun mul_62 () Int (* mul_61 residual_size2))
(define-fun eq_83 () Bool (= mul_62 0))
(define-fun not__56 () Bool (not eq_83))
(assert not__56)
(define-fun eq_84 () Bool (= residual_size2 1))
(define-fun not__57 () Bool (not eq_84))
(assert not__57)
(define-fun eq_85 () Bool (= residual_stride2 1))
(assert eq_85)
(define-fun eq_86 () Bool (= residual_size1 1))
(define-fun not__58 () Bool (not eq_86))
(assert not__58)
(define-fun eq_87 () Bool (= residual_stride1 residual_size2))
(assert eq_87)
(define-fun mul_63 () Int (* residual_size2 residual_size1))
(define-fun eq_88 () Bool (= residual_size0 1))
(assert eq_88)
(define-fun eq_89 () Bool (= residual_size0 residual_size0))
(assert eq_89)
(define-fun eq_90 () Bool (= residual_size1 residual_size1))
(assert eq_90)
(define-fun eq_91 () Bool (= residual_size2 residual_size2))
(assert eq_91)
(define-fun eq_92 () Bool (= residual_stride2 0))
(define-fun not__59 () Bool (not eq_92))
(assert not__59)
(define-fun eq_93 () Bool (= residual_stride1 0))
(define-fun not__60 () Bool (not eq_93))
(assert not__60)
(define-fun lt_17 () Bool (< residual_stride2 residual_stride1))
(assert lt_17)
(define-fun eq_94 () Bool (= residual_stride0 0))
(define-fun not__61 () Bool (not eq_94))
(assert not__61)
(define-fun lt_18 () Bool (< residual_stride1 residual_stride0))
(assert lt_18)
(define-fun mul_64 () Int (* mul_63 residual_size0))
(define-fun mul_65 () Int (* mul_63 sub_13))
(define-fun add_33 () Int (+ 1 mul_65))
(define-fun mul_66 () Int (* residual_size2 sub_14))
(define-fun add_34 () Int (+ add_33 mul_66))
(define-fun add_35 () Int (+ add_34 sub_15))
(define-fun mul_67 () Int (* 4 add_35))
(define-fun ge_20 () Bool (>= residual_storage_offset 0))
(assert ge_20)
(define-fun add_36 () Int (+ residual_storage_offset add_32))
(define-fun mul_68 () Int (* 4 add_36))
(define-fun lt_19 () Bool (< residual_size2 0))
(define-fun not__62 () Bool (not lt_19))
(assert not__62)
(define-fun lt_20 () Bool (< residual_size1 0))
(define-fun not__63 () Bool (not lt_20))
(assert not__63)
(define-fun lt_21 () Bool (< residual_size0 0))
(define-fun not__64 () Bool (not lt_21))
(assert not__64)
(define-fun eq_95 () Bool (= residual_size2 ___stack0_0__size2))
(assert eq_95)
(define-fun eq_96 () Bool (= residual_size1 ___stack0_0__size1))
(assert eq_96)
(define-fun lt_22 () Bool (< ___stack0_0__size0 0))
(define-fun not__65 () Bool (not lt_22))
(assert not__65)
(define-fun eq_97 () Bool (= residual_size0 ___stack0_0__size0))
(assert eq_97)
(define-fun eq_98 () Bool (= ___stack0_0__size0 ___stack0_0__size0))
(assert eq_98)
(define-fun eq_99 () Bool (= ___stack0_0__size1 residual_size1))
(assert eq_99)
(define-fun eq_100 () Bool (= ___stack0_0__size2 residual_size2))
(assert eq_100)
(define-fun eq_101 () Bool (= residual_size2 512))
(assert eq_101)
(define-fun mul_69 () Int (* residual_size1 residual_size0))
(define-fun mul_70 () Int (* residual_size1 sub_13))
(define-fun add_37 () Int (+ 1 mul_70))
(define-fun add_38 () Int (+ add_37 sub_14))
(define-fun mul_71 () Int (* 4 add_38))
(define-fun eq_102 () Bool (= mul_61 0))
(define-fun not__66 () Bool (not eq_102))
(assert not__66)
(define-fun sym_float () Real (to_real residual_size2))
(define-fun lt_23 () Bool (< residual_size1 1))
(define-fun not__67 () Bool (not lt_23))
(assert not__67)
(define-fun gt_2 () Bool (> residual_size1 1))
(assert gt_2)
(define-fun eq_103 () Bool (= residual_size0 -1))
(define-fun not__68 () Bool (not eq_103))
(assert not__68)
(define-fun eq_104 () Bool (= residual_size1 -1))
(define-fun not__69 () Bool (not eq_104))
(assert not__69)
(define-fun eq_105 () Bool (= residual_size2 -1))
(define-fun not__70 () Bool (not eq_105))
(assert not__70)
(define-fun lt_24 () Bool (< residual_size1 2))
(define-fun not__71 () Bool (not lt_24))
(assert not__71)
(define-fun lt_25 () Bool (< residual_size0 2))
(assert lt_25)
(define-fun lt_26 () Bool (< residual_size2 2))
(define-fun not__72 () Bool (not lt_26))
(assert not__72)
(define-fun gt_3 () Bool (> residual_size2 1))
(assert gt_3)
(define-fun eq_106 () Bool (= mul_63 0))
(define-fun not__73 () Bool (not eq_106))
(assert not__73)
(define-fun lt_27 () Bool (< residual_size2 mul_63))
(assert lt_27)
(define-fun eq_107 () Bool (= 0 residual_size2))
(define-fun not__74 () Bool (not eq_107))
(assert not__74)
(define-fun eq_108 () Bool (= mul_61 -1))
(define-fun not__75 () Bool (not eq_108))
(assert not__75)
(define-fun ge_21 () Bool (>= mul_61 0))
(assert ge_21)
(define-fun eq_109 () Bool (= mul_62 mul_62))
(assert eq_109)
(define-fun eq_110 () Bool (= residual_size0 mul_61))
(define-fun not__76 () Bool (not eq_110))
(assert not__76)
(define-fun eq_111 () Bool (= mul_61 residual_size0))
(define-fun not__77 () Bool (not eq_111))
(assert not__77)
(define-fun mod () Int (mod residual_size0 mul_61))
(define-fun eq_112 () Bool (= mod 0))
(define-fun not__78 () Bool (not eq_112))
(assert not__78)
(define-fun mod_1 () Int (mod mul_61 mul_61))
(define-fun eq_113 () Bool (= mod_1 0))
(assert eq_113)
(define-fun mul_72 () Int (* residual_size1 residual_size2))
(define-fun eq_114 () Bool (= mul_72 0))
(define-fun not__79 () Bool (not eq_114))
(assert not__79)
(define-fun eq_115 () Bool (= mul_61 mul_61))
(assert eq_115)
(define-fun mul_73 () Int (* 512 residual_size1))
(define-fun mul_74 () Int (* 512 sub_14))
(define-fun add_39 () Int (+ 1 mul_74))
(define-fun add_40 () Int (+ add_39 511))
(define-fun mul_75 () Int (* 4 add_40))
(define-fun mul_76 () Int (* residual_size1 512))
(define-fun eq_116 () Bool (= mul_76 0))
(define-fun not__80 () Bool (not eq_116))
(assert not__80)
(define-fun mul_77 () Int (* mul_61 512))
(define-fun eq_117 () Bool (= mul_76 mul_77))
(assert eq_117)
(define-fun eq_118 () Bool (= residual_size1 residual_size0))
(define-fun not__81 () Bool (not eq_118))
(assert not__81)
(define-fun eq_119 () Bool (= residual_size0 residual_size1))
(define-fun not__82 () Bool (not eq_119))
(assert not__82)
(define-fun mod_2 () Int (mod residual_size1 residual_size0))
(define-fun eq_120 () Bool (= mod_2 0))
(assert eq_120)
(define-fun floordiv () Int (div residual_size1 residual_size0))
(define-fun mul_78 () Int (* 512 floordiv))
(define-fun mul_79 () Int (* residual_size0 floordiv))
(define-fun mul_80 () Int (* mul_79 512))
(define-fun eq_121 () Bool (= mul_80 0))
(define-fun not__83 () Bool (not eq_121))
(assert not__83)
(define-fun eq_122 () Bool (= floordiv 1))
(define-fun not__84 () Bool (not eq_122))
(assert not__84)
(define-fun eq_123 () Bool (= residual_size1 floordiv))
(assert eq_123)
(define-fun lt_28 () Bool (< floordiv 0))
(define-fun not__85 () Bool (not lt_28))
(assert not__85)
(define-fun eq_124 () Bool (= floordiv floordiv))
(assert eq_124)
(define-fun eq_125 () Bool (= mul_78 0))
(define-fun not__86 () Bool (not eq_125))
(assert not__86)
(define-fun gt_4 () Bool (> mul_78 512))
(assert gt_4)
(define-fun ge_22 () Bool (>= floordiv 0))
(assert ge_22)
(define-fun eq_126 () Bool (= floordiv 0))
(define-fun not__87 () Bool (not eq_126))
(assert not__87)
(define-fun mul_81 () Int (* mul_78 residual_size0))
(define-fun mul_82 () Int (* mul_78 sub_13))
(define-fun add_41 () Int (+ 1 mul_82))
(define-fun sub_16 () Int (- floordiv 1))
(define-fun mul_83 () Int (* 512 sub_16))
(define-fun add_42 () Int (+ add_41 mul_83))
(define-fun add_43 () Int (+ add_42 511))
(define-fun mul_84 () Int (* 4 add_43))
(define-fun eq_127 () Bool (= mul_49 -1))
(define-fun not__88 () Bool (not eq_127))
(assert not__88)
(define-fun ge_23 () Bool (>= mul_49 0))
(assert ge_23)
(define-fun eq_128 () Bool (= encoder_hidden_states_size2 -1))
(define-fun not__89 () Bool (not eq_128))
(assert not__89)
(define-fun eq_129 () Bool (= mul_50 mul_50))
(assert eq_129)
(define-fun eq_130 () Bool (= encoder_hidden_states_size0 mul_49))
(define-fun not__90 () Bool (not eq_130))
(assert not__90)
(define-fun eq_131 () Bool (= mul_49 encoder_hidden_states_size0))
(define-fun not__91 () Bool (not eq_131))
(assert not__91)
(define-fun mod_3 () Int (mod encoder_hidden_states_size0 mul_49))
(define-fun eq_132 () Bool (= mod_3 0))
(define-fun not__92 () Bool (not eq_132))
(assert not__92)
(define-fun mod_4 () Int (mod mul_49 mul_49))
(define-fun eq_133 () Bool (= mod_4 0))
(assert eq_133)
(define-fun mul_85 () Int (* encoder_hidden_states_size1 encoder_hidden_states_size2))
(define-fun eq_134 () Bool (= mul_85 0))
(define-fun not__93 () Bool (not eq_134))
(assert not__93)
(define-fun eq_135 () Bool (= mul_49 mul_49))
(assert eq_135)
(define-fun eq_136 () Bool (= encoder_hidden_states_size2 512))
(assert eq_136)
(define-fun mul_86 () Int (* 512 encoder_hidden_states_size1))
(define-fun mul_87 () Int (* 512 sub_11))
(define-fun add_44 () Int (+ 1 mul_87))
(define-fun add_45 () Int (+ add_44 511))
(define-fun mul_88 () Int (* 4 add_45))
(define-fun mul_89 () Int (* encoder_hidden_states_size1 512))
(define-fun eq_137 () Bool (= mul_89 0))
(define-fun not__94 () Bool (not eq_137))
(assert not__94)
(define-fun lt_29 () Bool (< encoder_hidden_states_size1 0))
(define-fun not__95 () Bool (not lt_29))
(assert not__95)
(define-fun lt_30 () Bool (< encoder_hidden_states_size1 2))
(define-fun not__96 () Bool (not lt_30))
(assert not__96)
(define-fun eq_138 () Bool (= encoder_hidden_states_size0 -1))
(define-fun not__97 () Bool (not eq_138))
(assert not__97)
(define-fun eq_139 () Bool (= encoder_hidden_states_size1 -1))
(define-fun not__98 () Bool (not eq_139))
(assert not__98)
(define-fun mul_90 () Int (* mul_49 512))
(define-fun eq_140 () Bool (= mul_89 mul_90))
(assert eq_140)
(define-fun eq_141 () Bool (= encoder_hidden_states_size1 encoder_hidden_states_size0))
(define-fun not__99 () Bool (not eq_141))
(assert not__99)
(define-fun eq_142 () Bool (= encoder_hidden_states_size0 encoder_hidden_states_size1))
(define-fun not__100 () Bool (not eq_142))
(assert not__100)
(define-fun mod_5 () Int (mod encoder_hidden_states_size1 encoder_hidden_states_size0))
(define-fun eq_143 () Bool (= mod_5 0))
(assert eq_143)
(define-fun floordiv_1 () Int (div encoder_hidden_states_size1 encoder_hidden_states_size0))
(define-fun mul_91 () Int (* 512 floordiv_1))
(define-fun mul_92 () Int (* encoder_hidden_states_size0 floordiv_1))
(define-fun mul_93 () Int (* mul_92 512))
(define-fun eq_144 () Bool (= mul_93 0))
(define-fun not__101 () Bool (not eq_144))
(assert not__101)
(define-fun eq_145 () Bool (= floordiv_1 1))
(define-fun not__102 () Bool (not eq_145))
(assert not__102)
(define-fun eq_146 () Bool (= encoder_hidden_states_size1 floordiv_1))
(assert eq_146)
(define-fun mul_94 () Int (* residual_size0 16))
(define-fun mul_95 () Int (* mul_94 32))
(define-fun eq_147 () Bool (= mul_93 mul_95))
(define-fun not__103 () Bool (not eq_147))
(assert not__103)
(define-fun gt_5 () Bool (> mul_95 0))
(assert gt_5)
(define-fun mod_6 () Int (mod mul_93 mul_95))
(define-fun eq_148 () Bool (= mod_6 0))
(assert eq_148)
(define-fun eq_149 () Bool (= mul_95 0))
(define-fun not__104 () Bool (not eq_149))
(assert not__104)
(define-fun floordiv_2 () Int (div mul_93 mul_95))
(define-fun eq_150 () Bool (= encoder_hidden_states_size0 residual_size0))
(assert eq_150)
(define-fun eq_151 () Bool (= floordiv_1 floordiv_2))
(assert eq_151)
(define-fun eq_152 () Bool (= residual_size0 encoder_hidden_states_size0))
(assert eq_152)
(define-fun eq_153 () Bool (= floordiv_2 floordiv_1))
(assert eq_153)
(define-fun mul_96 () Int (* mul_92 16))
(define-fun mul_97 () Int (* mul_96 32))
(define-fun eq_154 () Bool (= mul_97 0))
(define-fun not__105 () Bool (not eq_154))
(assert not__105)
(define-fun eq_155 () Bool (= floordiv_1 0))
(define-fun not__106 () Bool (not eq_155))
(assert not__106)
(define-fun gt_6 () Bool (> floordiv_1 1))
(assert gt_6)
(define-fun lt_31 () Bool (< 1 mul_91))
(assert lt_31)
(define-fun mul_98 () Int (* encoder_hidden_states_size0 16))
(define-fun mul_99 () Int (* mul_98 floordiv_1))
(define-fun mul_100 () Int (* mul_99 32))
(define-fun eq_156 () Bool (= mul_100 0))
(define-fun not__107 () Bool (not eq_156))
(assert not__107)
(define-fun lt_32 () Bool (< encoder_hidden_states_size0 2))
(assert lt_32)
(define-fun lt_33 () Bool (< floordiv_1 2))
(define-fun not__108 () Bool (not lt_33))
(assert not__108)
(define-fun ge_24 () Bool (>= floordiv_1 0))
(assert ge_24)
(define-fun mul_101 () Int (* 32 floordiv_1))
(define-fun mul_102 () Int (* mul_101 16))
(define-fun mul_103 () Int (* mul_102 encoder_hidden_states_size0))
(define-fun mul_104 () Int (* mul_102 sub_10))
(define-fun add_46 () Int (+ 1 mul_104))
(define-fun mul_105 () Int (* mul_101 15))
(define-fun add_47 () Int (+ add_46 mul_105))
(define-fun sub_17 () Int (- floordiv_1 1))
(define-fun mul_106 () Int (* 32 sub_17))
(define-fun add_48 () Int (+ add_47 mul_106))
(define-fun add_49 () Int (+ add_48 31))
(define-fun mul_107 () Int (* 4 add_49))
(define-fun eq_157 () Bool (= mul_101 mul_101))
(assert eq_157)
(define-fun eq_158 () Bool (= mul_101 1))
(define-fun not__109 () Bool (not eq_158))
(assert not__109)
(define-fun eq_159 () Bool (= mul_101 0))
(define-fun not__110 () Bool (not eq_159))
(assert not__110)
(define-fun lt_34 () Bool (< mul_101 0))
(define-fun not__111 () Bool (not lt_34))
(assert not__111)
(define-fun lt_35 () Bool (< 1 mul_102))
(assert lt_35)
(define-fun mul_108 () Int (* mul_61 16))
(define-fun mul_109 () Int (* mul_108 32))
(define-fun eq_160 () Bool (= mul_80 mul_109))
(assert eq_160)
(define-fun eq_161 () Bool (= floordiv residual_size1))
(assert eq_161)
(define-fun mul_110 () Int (* mul_79 16))
(define-fun mul_111 () Int (* mul_110 32))
(define-fun eq_162 () Bool (= mul_111 0))
(define-fun not__112 () Bool (not eq_162))
(assert not__112)
(define-fun gt_7 () Bool (> floordiv 1))
(assert gt_7)
(define-fun lt_36 () Bool (< 1 mul_78))
(assert lt_36)
(define-fun mul_112 () Int (* mul_94 floordiv))
(define-fun mul_113 () Int (* mul_112 32))
(define-fun eq_163 () Bool (= mul_113 0))
(define-fun not__113 () Bool (not eq_163))
(assert not__113)
(define-fun lt_37 () Bool (< floordiv 2))
(define-fun not__114 () Bool (not lt_37))
(assert not__114)
(define-fun mul_114 () Int (* 32 floordiv))
(define-fun mul_115 () Int (* mul_114 16))
(define-fun mul_116 () Int (* mul_115 residual_size0))
(define-fun mul_117 () Int (* mul_115 sub_13))
(define-fun add_50 () Int (+ 1 mul_117))
(define-fun mul_118 () Int (* mul_114 15))
(define-fun add_51 () Int (+ add_50 mul_118))
(define-fun mul_119 () Int (* 32 sub_16))
(define-fun add_52 () Int (+ add_51 mul_119))
(define-fun add_53 () Int (+ add_52 31))
(define-fun mul_120 () Int (* 4 add_53))
(define-fun eq_164 () Bool (= mul_114 mul_114))
(assert eq_164)
(define-fun eq_165 () Bool (= mul_114 1))
(define-fun not__115 () Bool (not eq_165))
(assert not__115)
(define-fun eq_166 () Bool (= mul_114 0))
(define-fun not__116 () Bool (not eq_166))
(assert not__116)
(define-fun lt_38 () Bool (< mul_114 0))
(define-fun not__117 () Bool (not lt_38))
(assert not__117)
(define-fun lt_39 () Bool (< 1 mul_115))
(assert lt_39)
(define-fun eq_167 () Bool (= mul_94 -1))
(define-fun not__118 () Bool (not eq_167))
(assert not__118)
(define-fun ge_25 () Bool (>= mul_94 0))
(assert ge_25)
(define-fun eq_168 () Bool (= mul_113 mul_95))
(define-fun not__119 () Bool (not eq_168))
(assert not__119)
(define-fun mod_7 () Int (mod mul_113 mul_95))
(define-fun eq_169 () Bool (= mod_7 0))
(assert eq_169)
(define-fun floordiv_3 () Int (div mul_113 mul_95))
(define-fun eq_170 () Bool (= residual_size0 mul_94))
(define-fun not__120 () Bool (not eq_170))
(assert not__120)
(define-fun eq_171 () Bool (= mul_94 residual_size0))
(define-fun not__121 () Bool (not eq_171))
(assert not__121)
(define-fun mod_8 () Int (mod residual_size0 mul_94))
(define-fun eq_172 () Bool (= mod_8 0))
(define-fun not__122 () Bool (not eq_172))
(assert not__122)
(define-fun mod_9 () Int (mod mul_94 mul_94))
(define-fun eq_173 () Bool (= mod_9 0))
(assert eq_173)
(define-fun mul_121 () Int (* 16 floordiv))
(define-fun mul_122 () Int (* mul_121 32))
(define-fun eq_174 () Bool (= mul_122 0))
(define-fun not__123 () Bool (not eq_174))
(assert not__123)
(define-fun eq_175 () Bool (= mul_94 mul_94))
(assert eq_175)
(define-fun eq_176 () Bool (= floordiv_3 floordiv))
(assert eq_176)
(define-fun eq_177 () Bool (= mul_100 mul_95))
(define-fun not__124 () Bool (not eq_177))
(assert not__124)
(define-fun mod_10 () Int (mod mul_100 mul_95))
(define-fun eq_178 () Bool (= mod_10 0))
(assert eq_178)
(define-fun floordiv_4 () Int (div mul_100 mul_95))
(define-fun eq_179 () Bool (= encoder_hidden_states_size0 mul_94))
(define-fun not__125 () Bool (not eq_179))
(assert not__125)
(define-fun eq_180 () Bool (= mul_94 encoder_hidden_states_size0))
(define-fun not__126 () Bool (not eq_180))
(assert not__126)
(define-fun mod_11 () Int (mod encoder_hidden_states_size0 mul_94))
(define-fun eq_181 () Bool (= mod_11 0))
(define-fun not__127 () Bool (not eq_181))
(assert not__127)
(define-fun mod_12 () Int (mod mul_98 mul_94))
(define-fun eq_182 () Bool (= mod_12 0))
(assert eq_182)
(define-fun mul_123 () Int (* 16 floordiv_1))
(define-fun mul_124 () Int (* mul_123 32))
(define-fun eq_183 () Bool (= mul_124 0))
(define-fun not__128 () Bool (not eq_183))
(assert not__128)
(define-fun eq_184 () Bool (= mul_98 mul_94))
(assert eq_184)
(define-fun eq_185 () Bool (= floordiv_4 floordiv_1))
(assert eq_185)
(define-fun eq_186 () Bool (= mul_91 0))
(define-fun not__129 () Bool (not eq_186))
(assert not__129)
(define-fun lt_40 () Bool (< 1 mul_101))
(assert lt_40)
(define-fun lt_41 () Bool (< 32 mul_101))
(assert lt_41)
(define-fun mul_125 () Int (* floordiv_1 floordiv))
(define-fun mul_126 () Int (* mul_125 16))
(define-fun mul_127 () Int (* mul_125 15))
(define-fun add_54 () Int (+ 1 mul_127))
(define-fun mul_128 () Int (* floordiv_1 sub_16))
(define-fun add_55 () Int (+ add_54 mul_128))
(define-fun add_56 () Int (+ add_55 sub_17))
(define-fun mul_129 () Int (* 4 add_56))
(define-fun mul_130 () Int (* mul_121 floordiv_1))
(define-fun eq_187 () Bool (= mul_130 0))
(define-fun not__130 () Bool (not eq_187))
(assert not__130)
(define-fun eq_188 () Bool (= floordiv_1 floordiv_1))
(assert eq_188)
(define-fun eq_189 () Bool (= mul_125 mul_125))
(assert eq_189)
(define-fun eq_190 () Bool (= mul_7 0))
(define-fun not__131 () Bool (not eq_190))
(assert not__131)
(define-fun eq_191 () Bool (= mul_68 0))
(define-fun not__132 () Bool (not eq_191))
(assert not__132)
(define-fun eq_192 () Bool (= mul_67 0))
(define-fun not__133 () Bool (not eq_192))
(assert not__133)
(define-fun output0_size0 () Int residual_size0)
(define-fun output0_size1 () Int residual_size1)
(define-fun output0_size2 () Int residual_size2)
(define-fun output0_stride0 () Int mul_63)
(define-fun output0_stride1 () Int residual_size2)
(define-fun output0_stride2 () Int 1)
(define-fun output0_storage_offset () Int 0)
(check-sat)
(get-value (___stack0_0___base_size0 ___stack0_0___base_size1 ___stack0_0___base_stride0 ___stack0_0___base_stride1 ___stack0_0___base_storage_offset ___stack0_0__size0 ___stack0_0__size1 ___stack0_0__size2 ___stack0_0__stride0 ___stack0_0__stride1 ___stack0_0__stride2 ___stack0_0__storage_offset ___stack0_2__0__size0 ___stack0_2__0__size1 ___stack0_2__0__size2 ___stack0_2__0__size3 ___stack0_2__0__stride0 ___stack0_2__0__stride1 ___stack0_2__0__stride2 ___stack0_2__0__stride3 ___stack0_2__0__storage_offset ___stack0_2__1__size0 ___stack0_2__1__size1 ___stack0_2__1__size2 ___stack0_2__1__size3 ___stack0_2__1__stride0 ___stack0_2__1__stride1 ___stack0_2__1__stride2 ___stack0_2__1__stride3 ___stack0_2__1__storage_offset encoder_hidden_states_size0 encoder_hidden_states_size1 encoder_hidden_states_size2 encoder_hidden_states_stride0 encoder_hidden_states_stride1 encoder_hidden_states_stride2 encoder_hidden_states_storage_offset residual_size0 residual_size1 residual_size2 residual_stride0 residual_stride1 residual_stride2 residual_storage_offset output0_size0 output0_size1 output0_size2 output0_stride0 output0_stride1 output0_stride2 output0_storage_offset))
