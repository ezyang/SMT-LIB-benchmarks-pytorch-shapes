(set-option :produce-models true)
(define-fun ceil ((x Real)) Int (ite (= (to_int x) x) (to_int x) (+ (to_int x) 1)))
(define-fun min2 ((x Int) (y Int)) Int (ite (< x y) x y))
(define-fun max2 ((x Int) (y Int)) Int (ite (> x y) x y))
(define-fun sqrt ((x Real)) Real (^ x 0.5))

(declare-const x_size0 Int)
(set-info :example-x_size0 8)
(declare-const x_size1 Int)
(set-info :example-x_size1 196)
(declare-const x_size2 Int)
(set-info :example-x_size2 768)
(declare-const x_stride0 Int)
(set-info :example-x_stride0 150528)
(declare-const x_stride1 Int)
(set-info :example-x_stride1 768)
(declare-const x_stride2 Int)
(set-info :example-x_stride2 1)
(declare-const x_storage_offset Int)
(set-info :example-x_storage_offset 0)
(define-fun ge () Bool (>= x_size0 0))
(assert ge)
(define-fun ge_1 () Bool (>= x_size1 0))
(assert ge_1)
(define-fun ge_2 () Bool (>= x_size2 0))
(assert ge_2)
(define-fun eq () Bool (= x_size0 0))
(define-fun not_ () Bool (not eq))
(assert not_)
(define-fun sub () Int (- x_size0 1))
(define-fun mul () Int (* x_stride0 sub))
(define-fun add () Int (+ 1 mul))
(define-fun eq_1 () Bool (= x_size1 0))
(define-fun not__1 () Bool (not eq_1))
(assert not__1)
(define-fun sub_1 () Int (- x_size1 1))
(define-fun mul_1 () Int (* x_stride1 sub_1))
(define-fun add_1 () Int (+ add mul_1))
(define-fun eq_2 () Bool (= x_size2 0))
(define-fun not__2 () Bool (not eq_2))
(assert not__2)
(define-fun sub_2 () Int (- x_size2 1))
(define-fun mul_2 () Int (* x_stride2 sub_2))
(define-fun add_2 () Int (+ add_1 mul_2))
(define-fun mul_3 () Int (* 4 add_2))
(define-fun mul_4 () Int (* x_size0 x_size1))
(define-fun mul_5 () Int (* mul_4 x_size2))
(define-fun eq_3 () Bool (= mul_5 0))
(define-fun not__3 () Bool (not eq_3))
(assert not__3)
(define-fun eq_4 () Bool (= x_size2 1))
(define-fun not__4 () Bool (not eq_4))
(assert not__4)
(define-fun eq_5 () Bool (= x_stride2 1))
(assert eq_5)
(define-fun eq_6 () Bool (= x_size1 1))
(define-fun not__5 () Bool (not eq_6))
(assert not__5)
(define-fun eq_7 () Bool (= x_stride1 x_size2))
(assert eq_7)
(define-fun mul_6 () Int (* x_size2 x_size1))
(define-fun eq_8 () Bool (= x_size0 1))
(define-fun not__6 () Bool (not eq_8))
(assert not__6)
(define-fun eq_9 () Bool (= x_stride0 mul_6))
(assert eq_9)
(define-fun mul_7 () Int (* mul_6 x_size0))
(define-fun eq_10 () Bool (= x_size0 x_size0))
(assert eq_10)
(define-fun eq_11 () Bool (= x_size1 x_size1))
(assert eq_11)
(define-fun eq_12 () Bool (= x_size2 x_size2))
(assert eq_12)
(define-fun eq_13 () Bool (= x_stride2 0))
(define-fun not__7 () Bool (not eq_13))
(assert not__7)
(define-fun eq_14 () Bool (= x_stride1 0))
(define-fun not__8 () Bool (not eq_14))
(assert not__8)
(define-fun lt () Bool (< x_stride2 x_stride1))
(assert lt)
(define-fun eq_15 () Bool (= x_stride0 0))
(define-fun not__9 () Bool (not eq_15))
(assert not__9)
(define-fun lt_1 () Bool (< x_stride1 x_stride0))
(assert lt_1)
(define-fun mul_8 () Int (* mul_6 sub))
(define-fun add_3 () Int (+ 1 mul_8))
(define-fun mul_9 () Int (* x_size2 sub_1))
(define-fun add_4 () Int (+ add_3 mul_9))
(define-fun add_5 () Int (+ add_4 sub_2))
(define-fun mul_10 () Int (* 4 add_5))
(define-fun eq_16 () Bool (= mul_6 mul_6))
(assert eq_16)
(define-fun ge_3 () Bool (>= x_storage_offset 0))
(assert ge_3)
(define-fun add_6 () Int (+ x_storage_offset add_2))
(define-fun mul_11 () Int (* 4 add_6))
(declare-const self_rel_indices_size0 Int)
(set-info :example-self_rel_indices_size0 1)
(declare-const self_rel_indices_size1 Int)
(set-info :example-self_rel_indices_size1 1)
(declare-const self_rel_indices_size2 Int)
(set-info :example-self_rel_indices_size2 1)
(declare-const self_rel_indices_size3 Int)
(set-info :example-self_rel_indices_size3 3)
(declare-const self_rel_indices_stride0 Int)
(set-info :example-self_rel_indices_stride0 3)
(declare-const self_rel_indices_stride1 Int)
(set-info :example-self_rel_indices_stride1 3)
(declare-const self_rel_indices_stride2 Int)
(set-info :example-self_rel_indices_stride2 3)
(declare-const self_rel_indices_stride3 Int)
(set-info :example-self_rel_indices_stride3 1)
(declare-const self_rel_indices_storage_offset Int)
(set-info :example-self_rel_indices_storage_offset 0)
(define-fun ge_4 () Bool (>= self_rel_indices_size0 0))
(assert ge_4)
(define-fun ge_5 () Bool (>= self_rel_indices_size1 0))
(assert ge_5)
(define-fun ge_6 () Bool (>= self_rel_indices_size2 0))
(assert ge_6)
(define-fun ge_7 () Bool (>= self_rel_indices_size3 0))
(assert ge_7)
(define-fun eq_17 () Bool (= self_rel_indices_size0 0))
(define-fun not__10 () Bool (not eq_17))
(assert not__10)
(define-fun sub_3 () Int (- self_rel_indices_size0 1))
(define-fun mul_12 () Int (* self_rel_indices_stride0 sub_3))
(define-fun add_7 () Int (+ 1 mul_12))
(define-fun eq_18 () Bool (= self_rel_indices_size1 0))
(define-fun not__11 () Bool (not eq_18))
(assert not__11)
(define-fun sub_4 () Int (- self_rel_indices_size1 1))
(define-fun mul_13 () Int (* self_rel_indices_stride1 sub_4))
(define-fun add_8 () Int (+ add_7 mul_13))
(define-fun eq_19 () Bool (= self_rel_indices_size2 0))
(define-fun not__12 () Bool (not eq_19))
(assert not__12)
(define-fun sub_5 () Int (- self_rel_indices_size2 1))
(define-fun mul_14 () Int (* self_rel_indices_stride2 sub_5))
(define-fun add_9 () Int (+ add_8 mul_14))
(define-fun eq_20 () Bool (= self_rel_indices_size3 0))
(define-fun not__13 () Bool (not eq_20))
(assert not__13)
(define-fun sub_6 () Int (- self_rel_indices_size3 1))
(define-fun mul_15 () Int (* self_rel_indices_stride3 sub_6))
(define-fun add_10 () Int (+ add_9 mul_15))
(define-fun mul_16 () Int (* 4 add_10))
(define-fun mul_17 () Int (* self_rel_indices_size0 self_rel_indices_size1))
(define-fun mul_18 () Int (* mul_17 self_rel_indices_size2))
(define-fun mul_19 () Int (* mul_18 self_rel_indices_size3))
(define-fun eq_21 () Bool (= mul_19 0))
(define-fun not__14 () Bool (not eq_21))
(assert not__14)
(define-fun eq_22 () Bool (= self_rel_indices_size3 1))
(define-fun not__15 () Bool (not eq_22))
(assert not__15)
(define-fun eq_23 () Bool (= self_rel_indices_stride3 1))
(assert eq_23)
(define-fun eq_24 () Bool (= self_rel_indices_size2 1))
(assert eq_24)
(define-fun eq_25 () Bool (= self_rel_indices_size1 1))
(assert eq_25)
(define-fun eq_26 () Bool (= self_rel_indices_size0 1))
(assert eq_26)
(define-fun eq_27 () Bool (= self_rel_indices_stride1 0))
(define-fun not__16 () Bool (not eq_27))
(assert not__16)
(define-fun lt_2 () Bool (< self_rel_indices_stride1 0))
(define-fun not__17 () Bool (not lt_2))
(assert not__17)
(define-fun gt () Bool (> self_rel_indices_size1 1))
(define-fun not__18 () Bool (not gt))
(assert not__18)
(define-fun lt_3 () Bool (< self_rel_indices_stride3 self_rel_indices_stride1))
(assert lt_3)
(define-fun ge_8 () Bool (>= self_rel_indices_storage_offset 0))
(assert ge_8)
(define-fun add_11 () Int (+ self_rel_indices_storage_offset add_10))
(define-fun mul_20 () Int (* 4 add_11))
(define-fun eq_28 () Bool (= self_rel_indices_size1 x_size1))
(define-fun not__19 () Bool (not eq_28))
(assert not__19)
(define-fun eq_29 () Bool (= mul_20 0))
(define-fun not__20 () Bool (not eq_29))
(assert not__20)
(define-fun eq_30 () Bool (= mul_11 0))
(define-fun not__21 () Bool (not eq_30))
(assert not__21)
(check-sat)
(get-value (x_size0 x_size1 x_size2 x_stride0 x_stride1 x_stride2 x_storage_offset self_rel_indices_size0 self_rel_indices_size1 self_rel_indices_size2 self_rel_indices_size3 self_rel_indices_stride0 self_rel_indices_stride1 self_rel_indices_stride2 self_rel_indices_stride3 self_rel_indices_storage_offset))
