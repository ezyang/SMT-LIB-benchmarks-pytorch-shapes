(set-option :produce-models true)
(define-fun ceil ((x Real)) Int (ite (= (to_int x) x) (to_int x) (+ (to_int x) 1)))
(define-fun min2 ((x Int) (y Int)) Int (ite (< x y) x y))
(define-fun max2 ((x Int) (y Int)) Int (ite (> x y) x y))
(define-fun sqrt ((x Real)) Real (^ x 0.5))

(declare-const pred_size0 Int)
(declare-const pred_size1 Int)
(declare-const pred_stride0 Int)
(declare-const pred_stride1 Int)
(declare-const pred_storage_offset Int)
(define-fun ge () Bool (>= pred_size0 0))
(assert ge)
(define-fun ge_1 () Bool (>= pred_size1 0))
(assert ge_1)
(define-fun eq () Bool (= pred_size0 0))
(define-fun not_ () Bool (not eq))
(assert not_)
(define-fun sub () Int (- pred_size0 1))
(define-fun mul () Int (* pred_stride0 sub))
(define-fun add () Int (+ 1 mul))
(define-fun eq_1 () Bool (= pred_size1 0))
(define-fun not__1 () Bool (not eq_1))
(assert not__1)
(define-fun sub_1 () Int (- pred_size1 1))
(define-fun mul_1 () Int (* pred_stride1 sub_1))
(define-fun add_1 () Int (+ add mul_1))
(define-fun mul_2 () Int (* 4 add_1))
(define-fun mul_3 () Int (* pred_size0 pred_size1))
(define-fun eq_2 () Bool (= mul_3 0))
(define-fun not__2 () Bool (not eq_2))
(assert not__2)
(define-fun eq_3 () Bool (= pred_size1 1))
(define-fun not__3 () Bool (not eq_3))
(assert not__3)
(define-fun eq_4 () Bool (= pred_stride1 1))
(assert eq_4)
(define-fun eq_5 () Bool (= pred_size0 1))
(define-fun not__4 () Bool (not eq_5))
(assert not__4)
(define-fun eq_6 () Bool (= pred_stride0 pred_size1))
(assert eq_6)
(define-fun mul_4 () Int (* pred_size1 pred_size0))
(define-fun eq_7 () Bool (= pred_size0 pred_size0))
(assert eq_7)
(define-fun eq_8 () Bool (= pred_size1 pred_size1))
(assert eq_8)
(define-fun eq_9 () Bool (= pred_stride1 0))
(define-fun not__5 () Bool (not eq_9))
(assert not__5)
(define-fun eq_10 () Bool (= pred_stride0 0))
(define-fun not__6 () Bool (not eq_10))
(assert not__6)
(define-fun lt () Bool (< pred_stride1 pred_stride0))
(assert lt)
(define-fun mul_5 () Int (* pred_size1 sub))
(define-fun add_2 () Int (+ 1 mul_5))
(define-fun add_3 () Int (+ add_2 sub_1))
(define-fun mul_6 () Int (* 4 add_3))
(define-fun ge_2 () Bool (>= pred_storage_offset 0))
(assert ge_2)
(define-fun add_4 () Int (+ pred_storage_offset add_1))
(define-fun mul_7 () Int (* 4 add_4))
(declare-const self_target_size0 Int)
(declare-const self_target_stride0 Int)
(declare-const self_target_storage_offset Int)
(define-fun ge_3 () Bool (>= self_target_size0 0))
(assert ge_3)
(define-fun eq_11 () Bool (= self_target_size0 0))
(define-fun not__7 () Bool (not eq_11))
(assert not__7)
(define-fun sub_2 () Int (- self_target_size0 1))
(define-fun mul_8 () Int (* self_target_stride0 sub_2))
(define-fun add_5 () Int (+ 1 mul_8))
(define-fun mul_9 () Int (* 8 add_5))
(define-fun eq_12 () Bool (= self_target_size0 1))
(define-fun not__8 () Bool (not eq_12))
(assert not__8)
(define-fun eq_13 () Bool (= self_target_stride0 1))
(assert eq_13)
(define-fun ge_4 () Bool (>= self_target_storage_offset 0))
(assert ge_4)
(define-fun add_6 () Int (+ self_target_storage_offset add_5))
(define-fun mul_10 () Int (* 8 add_6))
(define-fun eq_14 () Bool (= pred_size1 1000))
(assert eq_14)
(define-fun add_7 () Int (+ 1 sub))
(define-fun mul_11 () Int (* 4 add_7))
(define-fun lt_1 () Bool (< pred_size1 0))
(define-fun not__9 () Bool (not lt_1))
(assert not__9)
(define-fun lt_2 () Bool (< pred_size0 0))
(define-fun not__10 () Bool (not lt_2))
(assert not__10)
(define-fun eq_15 () Bool (= pred_size0 -1))
(define-fun not__11 () Bool (not eq_15))
(assert not__11)
(define-fun eq_16 () Bool (= pred_size1 -1))
(define-fun not__12 () Bool (not eq_16))
(assert not__12)
(define-fun lt_3 () Bool (< pred_size1 2))
(define-fun not__13 () Bool (not lt_3))
(assert not__13)
(define-fun lt_4 () Bool (< pred_size0 2))
(define-fun not__14 () Bool (not lt_4))
(assert not__14)
(define-fun gt () Bool (> pred_size1 1))
(assert gt)
(define-fun lt_5 () Bool (< pred_size0 1))
(define-fun not__15 () Bool (not lt_5))
(assert not__15)
(define-fun eq_17 () Bool (= mul_3 mul_3))
(assert eq_17)
(define-fun eq_18 () Bool (= pred_size0 self_target_size0))
(assert eq_18)
(define-fun eq_19 () Bool (= self_target_size0 self_target_size0))
(assert eq_19)
(define-fun le () Bool (<= self_target_size0 pred_size0))
(assert le)
(define-fun add_8 () Int (+ 1 sub_2))
(define-fun mul_12 () Int (* 4 add_8))
(define-fun mul_13 () Real (* 1.0 self_target_size0))
(define-fun sym_float () Real (to_real self_target_size0))
(define-fun eq_20 () Bool (= mul_7 0))
(define-fun not__16 () Bool (not eq_20))
(assert not__16)
(define-fun eq_21 () Bool (= mul_10 0))
(define-fun not__17 () Bool (not eq_21))
(assert not__17)
(define-fun output0_storage_offset () Int 0)
(check-sat)
(get-model)
